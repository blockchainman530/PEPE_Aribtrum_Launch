{"version":3,"sources":["components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/Modal/Spacer.tsx","components/Modal/ModalActions.tsx","components/Modal/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/hooks/useUnstakeFarms.ts","views/Farms/hooks/useStakeFarms.ts","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/hooks/useHarvestFarm.ts","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/hooks/useApproveFarm.ts","views/Farms/components/FarmCard/CardActionsContainer.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/Farms.tsx","components/PageHeader/PageHeader.tsx"],"names":["Wrapper","styled","div","theme","colors","primary","ExpandableSectionButton","onClick","expanded","t","useTranslation","role","color","bold","defaultProps","ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","chainId","tokenAddressString","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","justifyContent","width","height","href","symbol","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","token","quoteToken","alignItems","mb","variant","primaryToken","secondaryToken","flexDirection","split","ml","StyledSpacer","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","onChange","onSelectMax","value","inputTitle","decimals","isBalanceZero","style","position","pl","fontSize","balance","balanceBigNumber","BigNumber","gt","lt","toLocaleString","toFixed","ROUND_DOWN","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","stakedBalance","onConfirm","onDismiss","tokenName","displayApr","lpPrice","apr","cakePrice","useState","val","setVal","useToast","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","fullBalance","useMemo","getFullDisplayBalance","lpTokensToStake","fullBalanceNumber","usdToStake","times","interestBreakdown","getInterestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","formatNumber","handleChange","useCallback","e","currentTarget","validity","valid","replace","handleSelectMax","RoiCalculatorModal","linkLabel","stakingTokenBalance","plus","stakingTokenSymbol","stakingTokenPrice","linkHref","isFarm","initialValue","onBack","title","mt","disabled","isFinite","eq","a","console","error","alignSelf","WithdrawModal","valNumber","log","useUnstakeFarms","pid","masterChefContract","useMasterchef","onUnstake","amount","unstakeFarm","useStakeFarms","onStake","stakeFarm","txHash","info","IconButtonWrapper","StakeAction","tokenBalance","location","useLocation","dispatch","useAppDispatch","account","useWeb3React","useLpTokenPrice","handleStake","fetchFarmUserDataAsync","pids","handleUnstake","stakedBalanceBigNumber","getBalanceAmount","useModal","onPresentDeposit","onPresentWithdraw","Balance","getBalanceNumber","unit","prefix","some","item","pathname","includes","useHarvestFarm","farmPid","onReward","harvestFarm","HarvestAction","earnings","usePriceCakeBusd","rawEarningsBalance","BIG_ZERO","earningsBusd","multipliedBy","useApproveFarm","lpContract","callWithGasPrice","useCallWithGasPrice","onApprove","address","ethers","constants","MaxUint256","tx","wait","receipt","status","Action","CardActions","farm","requestedApproval","setRequestedApproval","lpAddresses","userData","allowance","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpAddress","getAddress","isApproved","isGreaterThan","useERC20","handleApprove","textTransform","pr","lpSymbol","ConnectWalletButton","ApyLabelContainer","ApyButton","useFarmUser","onPresentApyModal","event","stopPropagation","StyledCard","Card","FarmCardInnerContainer","ExpandingWrapper","cardBorder","FarmCard","showExpandableSection","setShowExpandableSection","liquidity","undefined","maximumFractionDigits","toUpperCase","earnLabel","dual","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","isPromotedFarm","isActive","isCommunity","display","CardActionsContainer","getBscScanLink","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","TokenWrapper","Farm","label","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isDesktop","useMatchBreakpoints","ReferenceElement","MultiplierWrapper","lg","Multiplier","displayMultiplier","toLowerCase","tooltipContent","my","useTooltip","placement","tooltipOffset","targetRef","tooltip","tooltipVisible","ref","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","ActionContent","earningsBigNumber","isZero","Staked","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","css","background","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","bsc","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","useDelayedUnmount","toggleActionPanel","useEffect","isMobile","isSmallerScreen","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","card","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","useRef","data","columns","rows","useTable","sortColumn","row","original","current","scrollIntoView","behavior","FarmTabButtons","activeIndex","hasStakeInFinishedFarms","url","useRouteMatch","as","Link","to","show","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Image","getDisplayApr","cakeRewardsApr","lpRewardsApr","Farms","path","useFarms","farmsLP","userDataLoaded","query","setQuery","usePersistState","localStorageKey","setViewMode","sortOption","setSortOption","chosenFarmsLength","isArchived","isInactive","usePollFarmsWithUserData","useUserFarmStakedOnly","stakedOnly","setStakedOnly","activeFarms","filter","isArchivedPid","inactiveFarms","archivedFarms","stakedOnlyFarms","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","busdPrice","totalLiquidity","getFarmApr","poolWeight","ChainId","MAINNET","lowercaseQuery","latinise","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","farms","orderBy","slice","sortFarms","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","PageHeader","exact","activeClassName","p","Page","checked","Select","options","onOptionChange","option","marginLeft","SearchInput","target","sort","b","renderContent","Loading","src","alt","Outer","Box","gradients","bubblegum","Inner"],"mappings":"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","file":"static/js/13.64ae9fec.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport interface ExpandableSectionButtonProps {\r\n  onClick?: () => void\r\n  expanded?: boolean\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n\r\n  svg {\r\n    fill: ${({ theme }) => theme.colors.primary};\r\n  }\r\n`\r\n\r\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper aria-label={t('Hide or show expandable content')} role=\"button\" onClick={() => onClick()}>\r\n      <Text color=\"primary\" bold>\r\n        {expanded ? t('Hide') : t('Details')}\r\n      </Text>\r\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nExpandableSectionButton.defaultProps = {\r\n  expanded: false,\r\n}\r\n\r\nexport default ExpandableSectionButton\r\n","export type TableProps = {\r\n  data?: TableDataTypes[]\r\n  selectedFilters?: string\r\n  sortBy?: string\r\n  sortDir?: string\r\n  onSort?: (value: string) => void\r\n}\r\n\r\nexport type ColumnsDefTypes = {\r\n  id: number\r\n  label: string\r\n  name: string\r\n  sortable: boolean\r\n}\r\n\r\nexport type ScrollBarProps = {\r\n  ref: string\r\n  width: number\r\n}\r\n\r\nexport type TableDataTypes = {\r\n  POOL: string\r\n  APR: string\r\n  EARNED: string\r\n  STAKED: string\r\n  DETAILS: string\r\n  LINKS: string\r\n}\r\n\r\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\r\n  {\r\n    id: 1,\r\n    name: 'farm',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'earned',\r\n    sortable: true,\r\n    label: 'Earned',\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'apr',\r\n    sortable: true,\r\n    label: 'APR',\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'liquidity',\r\n    sortable: true,\r\n    label: 'Liquidity',\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'multiplier',\r\n    sortable: true,\r\n    label: 'Multiplier',\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'details',\r\n    sortable: true,\r\n    label: '',\r\n  },\r\n]\r\n\r\nexport enum ViewMode {\r\n  'TABLE' = 'TABLE',\r\n  'CARD' = 'CARD',\r\n}\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\nimport { getWbnbAddress } from './addressHelpers'\r\n\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const wBNBAddressString = getWbnbAddress()\r\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\r\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\r\n  const firstPart =\r\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\r\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, LinkExternal, Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  infoAddress?: string\r\n  removed?: boolean\r\n  totalValueFormatted?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  infoAddress,\r\n  removed,\r\n  totalValueFormatted,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{t('Total Liquidity')}:</Text>\r\n        {totalValueFormatted ? <Text>{totalValueFormatted}</Text> : <Skeleton width={75} height={25} />}\r\n      </Flex>\r\n      {!removed && (\r\n        <StyledLinkExternal href={addLiquidityUrl}>{t('Get %symbol%', { symbol: lpLabel })}</StyledLinkExternal>\r\n      )}\r\n      <StyledLinkExternal href={bscScanAddress}>{t('View Contract')}</StyledLinkExternal>\r\n      <StyledLinkExternal href={infoAddress}>{t('See Pair Info')}</StyledLinkExternal>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Skeleton } from '@pancakeswap/uikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 4px;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({ lpLabel, multiplier, isCommunityFarm, token, quoteToken }) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={64} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          {multiplier ? (\r\n            <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n          ) : (\r\n            <Skeleton ml=\"4px\" width={42} height={28} />\r\n          )}\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React, { useContext } from 'react'\r\nimport styled, { ThemeContext } from 'styled-components'\r\n\r\ninterface SpacerProps {\r\n  size?: 'sm' | 'md' | 'lg'\r\n}\r\n\r\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\r\n  const { spacing } = useContext(ThemeContext)\r\n\r\n  let s: number\r\n  switch (size) {\r\n    case 'lg':\r\n      s = spacing[6]\r\n      break\r\n    case 'sm':\r\n      s = spacing[2]\r\n      break\r\n    case 'md':\r\n    default:\r\n      s = spacing[4]\r\n  }\r\n\r\n  return <StyledSpacer size={s} />\r\n}\r\n\r\ninterface StyledSpacerProps {\r\n  size: number\r\n}\r\n\r\nconst StyledSpacer = styled.div<StyledSpacerProps>`\r\n  height: ${(props) => props.size}px;\r\n  width: ${(props) => props.size}px;\r\n`\r\n\r\nexport default Spacer\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Spacer from './Spacer'\r\n\r\nconst ModalActions: React.FC = ({ children }) => {\r\n  const l = React.Children.toArray(children).length\r\n  return (\r\n    <StyledModalActions>\r\n      {React.Children.map(children, (child, i) => (\r\n        <>\r\n          <StyledModalAction>{child}</StyledModalAction>\r\n          {i < l - 1 && <Spacer />}\r\n        </>\r\n      ))}\r\n    </StyledModalActions>\r\n  )\r\n}\r\n\r\nconst StyledModalActions = styled.div`\r\n  align-items: center;\r\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\r\n  display: flex;\r\n  margin: 0;\r\n  padding: ${(props) => props.theme.spacing[4]}px 0;\r\n`\r\n\r\nconst StyledModalAction = styled.div`\r\n  flex: 1;\r\n`\r\n\r\nexport default ModalActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BigNumber } from 'bignumber.js'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n  decimals?: number\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n  border: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n  decimals = 18,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = (balance: string) => {\r\n    if (isBalanceZero) {\r\n      return '0'\r\n    }\r\n    const balanceBigNumber = new BigNumber(balance)\r\n    if (balanceBigNumber.gt(0) && balanceBigNumber.lt(0.0001)) {\r\n      return balanceBigNumber.toLocaleString()\r\n    }\r\n    return balanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">{t('Balance: %balance%', { balance: displayBalance(max) })}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput\r\n            pattern={`^[0-9]*[.,]?[0-9]{0,${decimals}}$`}\r\n            inputMode=\"decimal\"\r\n            step=\"any\"\r\n            min=\"0\"\r\n            onChange={onChange}\r\n            placeholder=\"0\"\r\n            value={value}\r\n          />\r\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {t('Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          {t('No tokens to stake')}:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {t('Get %symbol%', { symbol })}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\r\n\r\nconst AnnualRoiContainer = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst AnnualRoiDisplay = styled(Text)`\r\n  width: 72px;\r\n  max-width: 72px;\r\n  overflow: hidden;\r\n  text-align: right;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  stakedBalance: BigNumber\r\n  multiplier?: string\r\n  lpPrice: BigNumber\r\n  lpLabel?: string\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({\r\n  max,\r\n  stakedBalance,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  multiplier,\r\n  displayApr,\r\n  lpPrice,\r\n  lpLabel,\r\n  apr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const lpTokensToStake = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const usdToStake = lpTokensToStake.times(lpPrice)\r\n\r\n  const interestBreakdown = getInterestBreakdown({\r\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\r\n    apr,\r\n    earningTokenPrice: cakePrice.toNumber(),\r\n  })\r\n\r\n  const annualRoi = cakePrice.times(interestBreakdown[3])\r\n  const formattedAnnualRoi = formatNumber(\r\n    annualRoi.toNumber(),\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n  )\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  if (showRoiCalculator) {\r\n    return (\r\n      <RoiCalculatorModal\r\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n        stakingTokenBalance={stakedBalance.plus(max)}\r\n        stakingTokenSymbol={tokenName}\r\n        stakingTokenPrice={lpPrice.toNumber()}\r\n        earningTokenPrice={cakePrice.toNumber()}\r\n        apr={apr}\r\n        multiplier={multiplier}\r\n        displayApr={displayApr}\r\n        linkHref={addLiquidityUrl}\r\n        isFarm\r\n        initialValue={val}\r\n        onBack={() => setShowRoiCalculator(false)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n      />\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text mr=\"8px\" color=\"textSubtle\">\r\n          {t('Annual ROI at current rates')}:\r\n        </Text>\r\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\r\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </AnnualRoiContainer>\r\n      </Flex>\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const valNumber = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={t('Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Unstaked!'), t('Your earnings have also been harvested to your wallet'))\r\n              onDismiss()\r\n              \r\n            } catch (e) {\r\n              console.log(\"err: \", e)\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n          width=\"100%\"\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import { useCallback } from 'react'\r\nimport { unstakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useUnstakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleUnstake = useCallback(\r\n    async (amount: string) => {\r\n      await unstakeFarm(masterChefContract, pid, amount)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onUnstake: handleUnstake }\r\n}\r\n\r\nexport default useUnstakeFarms\r\n","import { useCallback } from 'react'\r\nimport { stakeFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useStakeFarms = (pid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stakeFarm(masterChefContract, pid, amount)\r\n      console.info(txHash)\r\n    },\r\n    [masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStakeFarms\r\n","import React, { useCallback } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport Balance from 'components/Balance'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { useLpTokenPrice } from 'state/farms/hooks'\r\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\r\nimport useStakeFarms from '../../hooks/useStakeFarms'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  multiplier?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  multiplier,\r\n  apr,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  lpLabel,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const lpPrice = useLpTokenPrice(tokenName)\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return '<0.0000001'\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0)) {\r\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={tokenName}\r\n      multiplier={multiplier}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return stakedBalance.eq(0) ? (\r\n      <Button\r\n        onClick={onPresentDeposit}\r\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n      >\r\n        {t('Stake LP')}\r\n      </Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n        <IconButton\r\n          variant=\"tertiary\"\r\n          onClick={onPresentDeposit}\r\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n        >\r\n          <AddIcon color=\"primary\" width=\"14px\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\r\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n          <Balance\r\n            fontSize=\"12px\"\r\n            color=\"textSubtle\"\r\n            decimals={2}\r\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n            unit=\" USD\"\r\n            prefix=\"~\"\r\n          />\r\n        )}\r\n      </Flex>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import { useCallback } from 'react'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useMasterchef } from 'hooks/useContract'\r\n\r\nconst useHarvestFarm = (farmPid: number) => {\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    await harvestFarm(masterChefContract, farmPid)\r\n  }, [farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport default useHarvestFarm\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          try {\r\n            await onReward()\r\n            toastSuccess(\r\n              `${t('Harvested')}!`,\r\n              t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n            )\r\n          } catch (e) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n            )\r\n            console.error(e)\r\n          } finally {\r\n            setPendingTx(false)\r\n          }\r\n          dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import { useCallback } from 'react'\r\nimport { ethers, Contract } from 'ethers'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\nconst useApproveFarm = (lpContract: Contract) => {\r\n  const masterChefContract = useMasterchef()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await callWithGasPrice(lpContract, 'approve', [\r\n        masterChefContract.address,\r\n        ethers.constants.MaxUint256,\r\n      ])\r\n      const receipt = await tx.wait()\r\n      return receipt.status\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [lpContract, masterChefContract, callWithGasPrice])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\nexport default useApproveFarm\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        apr={farm.apr}\r\n        lpLabel={lpLabel}\r\n        cakePrice={cakePrice}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\n\r\nconst ApyLabelContainer = styled(Flex)`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nexport interface ApyButtonProps {\r\n  variant: 'text' | 'text-and-button'\r\n  pid: number\r\n  lpSymbol: string\r\n  lpLabel?: string\r\n  multiplier: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  variant,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  cakePrice,\r\n  apr,\r\n  multiplier,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const [onPresentApyModal] = useModal(\r\n    <RoiCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\r\n      stakingTokenSymbol={lpSymbol}\r\n      stakingTokenPrice={lpPrice.toNumber()}\r\n      earningTokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      multiplier={multiplier}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\r\n      {displayApr}%\r\n      {variant === 'text-and-button' && (\r\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n          <CalculateIcon width=\"18px\" />\r\n        </IconButton>\r\n      )}\r\n    </ApyLabelContainer>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Card, Flex, Text, Skeleton } from '@pancakeswap/uikit'\r\nimport { Farm } from 'state/types'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n  lpRewardsApr?: number\r\n  liquidity?: BigNumber\r\n}\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: baseline;\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  displayApr: string\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, displayApr, removed, cakePrice, account }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const totalValueFormatted =\r\n    farm.liquidity && farm.liquidity.gt(0)\r\n      ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n      : ''\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : t('CAKE + Fees')\r\n\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: farm.quoteToken.address,\r\n    tokenAddress: farm.token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const isPromotedFarm = farm.token.symbol === 'CAKE'\r\n\r\n  return (\r\n    <StyledCard isActive={isPromotedFarm}>\r\n      <FarmCardInnerContainer>\r\n        <CardHeading\r\n          lpLabel={lpLabel}\r\n          multiplier={farm.multiplier}\r\n          isCommunityFarm={farm.isCommunity}\r\n          token={farm.token}\r\n          quoteToken={farm.quoteToken}\r\n        />\r\n        {!removed && (\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Text>{t('APR')}:</Text>\r\n            <Text bold style={{ display: 'flex', alignItems: 'center' }}>\r\n              {farm.apr ? (\r\n                <ApyButton\r\n                  variant=\"text-and-button\"\r\n                  pid={farm.pid}\r\n                  lpSymbol={farm.lpSymbol}\r\n                  multiplier={farm.multiplier}\r\n                  lpLabel={lpLabel}\r\n                  addLiquidityUrl={addLiquidityUrl}\r\n                  cakePrice={cakePrice}\r\n                  apr={farm.apr}\r\n                  displayApr={displayApr}\r\n                />\r\n              ) : (\r\n                <Skeleton height={24} width={80} />\r\n              )}\r\n            </Text>\r\n          </Flex>\r\n        )}\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Earn')}:</Text>\r\n          <Text bold>{earnLabel}</Text>\r\n        </Flex>\r\n        <CardActionsContainer\r\n          farm={farm}\r\n          lpLabel={lpLabel}\r\n          account={account}\r\n          cakePrice={cakePrice}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      </FarmCardInnerContainer>\r\n\r\n      <ExpandingWrapper>\r\n        <ExpandableSectionButton\r\n          onClick={() => setShowExpandableSection(!showExpandableSection)}\r\n          expanded={showExpandableSection}\r\n        />\r\n        {showExpandableSection && (\r\n          <DetailsSection\r\n            removed={removed}\r\n            bscScanAddress={getBscScanLink(lpAddress, 'address')}\r\n            infoAddress={`https://pancakeswap.info/pool/${lpAddress}`}\r\n            totalValueFormatted={totalValueFormatted}\r\n            lpLabel={lpLabel}\r\n            addLiquidityUrl={addLiquidityUrl}\r\n          />\r\n        )}\r\n      </ExpandingWrapper>\r\n    </StyledCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\r\nimport { Address } from 'config/constants/types'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface AprProps {\r\n  value: string\r\n  multiplier: string\r\n  pid: number\r\n  lpLabel: string\r\n  lpSymbol: string\r\n  tokenAddress?: Address\r\n  quoteTokenAddress?: Address\r\n  cakePrice: BigNumber\r\n  originalValue: number\r\n  hideButton?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.text};\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n\r\n    svg {\r\n      path {\r\n        fill: ${({ theme }) => theme.colors.textSubtle};\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst AprWrapper = styled.div`\r\n  min-width: 60px;\r\n  text-align: left;\r\n`\r\n\r\nconst Apr: React.FC<AprProps> = ({\r\n  value,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  multiplier,\r\n  tokenAddress,\r\n  quoteTokenAddress,\r\n  cakePrice,\r\n  originalValue,\r\n  hideButton = false,\r\n}) => {\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return originalValue !== 0 ? (\r\n    <Container>\r\n      {originalValue ? (\r\n        <ApyButton\r\n          variant={hideButton ? 'text' : 'text-and-button'}\r\n          pid={pid}\r\n          lpSymbol={lpSymbol}\r\n          lpLabel={lpLabel}\r\n          multiplier={multiplier}\r\n          cakePrice={cakePrice}\r\n          apr={originalValue}\r\n          displayApr={value}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n      ) : (\r\n        <AprWrapper>\r\n          <Skeleton width={60} />\r\n        </AprWrapper>\r\n      )}\r\n    </Container>\r\n  ) : (\r\n    <Container>\r\n      <AprWrapper>{originalValue}%</AprWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Apr\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { Token } from 'config/constants/types'\r\nimport { TokenPairImage } from 'components/TokenImage'\r\n\r\nexport interface FarmProps {\r\n  label: string\r\n  pid: number\r\n  token: Token\r\n  quoteToken: Token\r\n}\r\n\r\nconst Container = styled.div`\r\n  padding-left: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-left: 32px;\r\n  }\r\n`\r\n\r\nconst TokenWrapper = styled.div`\r\n  padding-right: 8px;\r\n  width: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: 40px;\r\n  }\r\n`\r\n\r\nconst Farm: React.FunctionComponent<FarmProps> = ({ token, quoteToken, label, pid }) => {\r\n  const { stakedBalance } = useFarmUser(pid)\r\n  const { t } = useTranslation()\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n\r\n  const handleRenderFarming = (): JSX.Element => {\r\n    if (rawStakedBalance) {\r\n      return (\r\n        <Text color=\"secondary\" fontSize=\"12px\" bold textTransform=\"uppercase\">\r\n          {t('Farming')}\r\n        </Text>\r\n      )\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TokenWrapper>\r\n        <TokenPairImage variant=\"inverted\" primaryToken={token} secondaryToken={quoteToken} width={40} height={40} />\r\n      </TokenWrapper>\r\n      <div>\r\n        {handleRenderFarming()}\r\n        <Text bold>{label}</Text>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Farm\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Skeleton } from '@pancakeswap/uikit'\r\n\r\nexport interface EarnedProps {\r\n  earnings: number\r\n  pid: number\r\n}\r\n\r\ninterface EarnedPropsWithLoading extends EarnedProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst Amount = styled.span<{ earned: number }>`\r\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\r\n  if (userDataReady) {\r\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\r\n  }\r\n  return (\r\n    <Amount earned={0}>\r\n      <Skeleton width={60} />\r\n    </Amount>\r\n  )\r\n}\r\n\r\nexport default Earned\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface DetailsProps {\r\n  actionPanelToggled: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  justify-content: flex-end;\r\n  padding-right: 8px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    padding-right: 0px;\r\n  }\r\n`\r\n\r\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\r\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\r\n  height: 20px;\r\n`\r\n\r\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\r\n  const { t } = useTranslation()\r\n  const { isDesktop } = useMatchBreakpoints()\r\n\r\n  return (\r\n    <Container>\r\n      {!isDesktop && t('Details')}\r\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Details\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, HelpIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface MultiplierProps {\r\n  multiplier: string\r\n}\r\n\r\nconst MultiplierWrapper = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  width: 36px;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\r\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : <Skeleton width={30} />\r\n  const { t } = useTranslation()\r\n  const tooltipContent = (\r\n    <>\r\n      <Text>\r\n        {t(\r\n          'The Multiplier represents the proportion of CAKE rewards each farm receives, as a proportion of the CAKE produced each block.',\r\n        )}\r\n      </Text>\r\n      <Text my=\"24px\">\r\n        {t('For example, if a 1x farm received 1 CAKE per block, a 40x farm would receive 40 CAKE per block.')}\r\n      </Text>\r\n      <Text>{t('This amount is already included in all APR calculations for the farm.')}</Text>\r\n    </>\r\n  )\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, {\r\n    placement: 'top-end',\r\n    tooltipOffset: [20, 10],\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Multiplier\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { HelpIcon, Text, Skeleton, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst ReferenceElement = styled.div`\r\n  display: inline-block;\r\n`\r\n\r\nexport interface LiquidityProps {\r\n  liquidity: BigNumber\r\n}\r\n\r\nconst LiquidityWrapper = styled.div`\r\n  min-width: 110px;\r\n  font-weight: 600;\r\n  text-align: right;\r\n  margin-right: 14px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: left;\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\r\n  const displayLiquidity =\r\n    liquidity && liquidity.gt(0) ? (\r\n      `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    ) : (\r\n      <Skeleton width={60} />\r\n    )\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('Total value of the funds in this farm’s liquidity pool'),\r\n    { placement: 'top-end', tooltipOffset: [20, 10] },\r\n  )\r\n\r\n  return (\r\n    <Container>\r\n      <LiquidityWrapper>\r\n        <Text>{displayLiquidity}</Text>\r\n      </LiquidityWrapper>\r\n      <ReferenceElement ref={targetRef}>\r\n        <HelpIcon color=\"textSubtle\" />\r\n      </ReferenceElement>\r\n      {tooltipVisible && tooltip}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Liquidity\r\n","import styled from 'styled-components'\r\n\r\nexport const ActionContainer = styled.div`\r\n  padding: 16px;\r\n  border: 2px solid ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  flex-grow: 1;\r\n  flex-basis: 0;\r\n  margin-bottom: 16px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 12px;\r\n    margin-right: 12px;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    margin-left: 48px;\r\n    margin-right: 0;\r\n    margin-bottom: 0;\r\n    max-height: 100px;\r\n  }\r\n`\r\n\r\nexport const ActionTitles = styled.div`\r\n  display: flex;\r\n`\r\n\r\nexport const ActionContent = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n`\r\n","import React, { useState } from 'react'\r\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          CAKE\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Heading>{displayBalance}</Heading>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport Balance from 'components/Balance'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport { useAppDispatch } from 'state'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\r\nimport DepositModal from '../../DepositModal'\r\nimport WithdrawModal from '../../WithdrawModal'\r\nimport useStakeFarms from '../../../hooks/useStakeFarms'\r\nimport useApproveFarm from '../../../hooks/useApproveFarm'\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n`\r\n\r\ninterface StackedActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n  lpLabel?: string\r\n  displayApr?: string\r\n}\r\n\r\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\r\n  pid,\r\n  apr,\r\n  multiplier,\r\n  lpSymbol,\r\n  lpLabel,\r\n  lpAddresses,\r\n  quoteToken,\r\n  token,\r\n  userDataReady,\r\n  displayApr,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const { onStake } = useStakeFarms(pid)\r\n  const { onUnstake } = useUnstakeFarms(pid)\r\n  const location = useLocation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol)\r\n  const cakePrice = usePriceCakeBusd()\r\n\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  const handleStake = async (amount: string) => {\r\n    await onStake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const handleUnstake = async (amount: string) => {\r\n    await onUnstake(amount)\r\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n  }\r\n\r\n  const displayBalance = useCallback(() => {\r\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\r\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\r\n    }\r\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\r\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\r\n    }\r\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }, [stakedBalance])\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal\r\n      max={tokenBalance}\r\n      lpPrice={lpPrice}\r\n      lpLabel={lpLabel}\r\n      apr={apr}\r\n      displayApr={displayApr}\r\n      stakedBalance={stakedBalance}\r\n      onConfirm={handleStake}\r\n      tokenName={lpSymbol}\r\n      multiplier={multiplier}\r\n      addLiquidityUrl={addLiquidityUrl}\r\n      cakePrice={cakePrice}\r\n    />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\r\n  )\r\n  const lpContract = useERC20(lpAddress)\r\n  const dispatch = useAppDispatch()\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  if (!account) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <ConnectWalletButton width=\"100%\" />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (isApproved) {\r\n    if (stakedBalance.gt(0)) {\r\n      return (\r\n        <ActionContainer>\r\n          <ActionTitles>\r\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n              {lpSymbol}\r\n            </Text>\r\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n              {t('Staked')}\r\n            </Text>\r\n          </ActionTitles>\r\n          <ActionContent>\r\n            <div>\r\n              <Heading>{displayBalance()}</Heading>\r\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\r\n                <Balance\r\n                  fontSize=\"12px\"\r\n                  color=\"textSubtle\"\r\n                  decimals={2}\r\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\r\n                  unit=\" USD\"\r\n                  prefix=\"~\"\r\n                />\r\n              )}\r\n            </div>\r\n            <IconButtonWrapper>\r\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n                <MinusIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n              <IconButton\r\n                variant=\"secondary\"\r\n                onClick={onPresentDeposit}\r\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n              >\r\n                <AddIcon color=\"primary\" width=\"14px\" />\r\n              </IconButton>\r\n            </IconButtonWrapper>\r\n          </ActionContent>\r\n        </ActionContainer>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\r\n            {t('Stake').toUpperCase()}\r\n          </Text>\r\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\r\n            {lpSymbol}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Button\r\n            width=\"100%\"\r\n            onClick={onPresentDeposit}\r\n            variant=\"secondary\"\r\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\r\n          >\r\n            {t('Stake LP')}\r\n          </Button>\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  if (!userDataReady) {\r\n    return (\r\n      <ActionContainer>\r\n        <ActionTitles>\r\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n            {t('Start Farming')}\r\n          </Text>\r\n        </ActionTitles>\r\n        <ActionContent>\r\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\r\n        </ActionContent>\r\n      </ActionContainer>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Enable Farm')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\r\n          {t('Enable')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default Staked\r\n","import React from 'react'\r\nimport styled, { keyframes, css } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LinkExternal, Text } from '@pancakeswap/uikit'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\r\n\r\nimport HarvestAction from './HarvestAction'\r\nimport StakedAction from './StakedAction'\r\nimport Apr, { AprProps } from '../Apr'\r\nimport Multiplier, { MultiplierProps } from '../Multiplier'\r\nimport Liquidity, { LiquidityProps } from '../Liquidity'\r\n\r\nexport interface ActionPanelProps {\r\n  apr: AprProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n  userDataReady: boolean\r\n  expanded: boolean\r\n}\r\n\r\nconst expandAnimation = keyframes`\r\n  from {\r\n    max-height: 0px;\r\n  }\r\n  to {\r\n    max-height: 500px;\r\n  }\r\n`\r\n\r\nconst collapseAnimation = keyframes`\r\n  from {\r\n    max-height: 500px;\r\n  }\r\n  to {\r\n    max-height: 0px;\r\n  }\r\n`\r\n\r\nconst Container = styled.div<{ expanded }>`\r\n  animation: ${({ expanded }) =>\r\n    expanded\r\n      ? css`\r\n          ${expandAnimation} 300ms linear forwards\r\n        `\r\n      : css`\r\n          ${collapseAnimation} 300ms linear forwards\r\n        `};\r\n  overflow: hidden;\r\n  background: ${({ theme }) => theme.colors.background};\r\n  display: flex;\r\n  width: 100%;\r\n  flex-direction: column-reverse;\r\n  padding: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    flex-direction: row;\r\n    padding: 16px 32px;\r\n  }\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  font-weight: 400;\r\n`\r\n\r\nconst StakeContainer = styled.div`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n  }\r\n`\r\n\r\nconst TagsContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 25px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-top: 16px;\r\n  }\r\n\r\n  > div {\r\n    height: 24px;\r\n    padding: 0 6px;\r\n    font-size: 14px;\r\n    margin-right: 4px;\r\n\r\n    svg {\r\n      width: 14px;\r\n    }\r\n  }\r\n`\r\n\r\nconst ActionContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    flex-basis: 0;\r\n  }\r\n`\r\n\r\nconst InfoContainer = styled.div`\r\n  min-width: 200px;\r\n`\r\n\r\nconst ValueContainer = styled.div`\r\n  display: block;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst ValueWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  margin: 4px 0px;\r\n`\r\n\r\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\r\n  details,\r\n  apr,\r\n  multiplier,\r\n  liquidity,\r\n  userDataReady,\r\n  expanded,\r\n}) => {\r\n  const farm = details\r\n\r\n  const { t } = useTranslation()\r\n  const isActive = farm.multiplier !== '0X'\r\n  const { quoteToken, token, dual } = farm\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\r\n    quoteTokenAddress: quoteToken.address,\r\n    tokenAddress: token.address,\r\n  })\r\n  const lpAddress = getAddress(farm.lpAddresses)\r\n  const bsc = getBscScanLink(lpAddress, 'address')\r\n  const info = `https://pancakeswap.info/pool/${lpAddress}`\r\n\r\n  return (\r\n    <Container expanded={expanded}>\r\n      <InfoContainer>\r\n        {isActive && (\r\n          <StakeContainer>\r\n            <StyledLinkExternal href={`/add/${liquidityUrlPathParts}`}>\r\n              {t('Get %symbol%', { symbol: lpLabel })}\r\n            </StyledLinkExternal>\r\n          </StakeContainer>\r\n        )}\r\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\r\n        <StyledLinkExternal href={info}>{t('See Pair Info')}</StyledLinkExternal>\r\n        <TagsContainer>\r\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\r\n          {dual ? <DualTag /> : null}\r\n        </TagsContainer>\r\n      </InfoContainer>\r\n      <ValueContainer>\r\n        <ValueWrapper>\r\n          <Text>{t('APR')}</Text>\r\n          <Apr {...apr} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Multiplier')}</Text>\r\n          <Multiplier {...multiplier} />\r\n        </ValueWrapper>\r\n        <ValueWrapper>\r\n          <Text>{t('Liquidity')}</Text>\r\n          <Liquidity {...liquidity} />\r\n        </ValueWrapper>\r\n      </ValueContainer>\r\n      <ActionContainer>\r\n        <HarvestAction {...farm} userDataReady={userDataReady} />\r\n        <StakedAction {...farm} userDataReady={userDataReady} lpLabel={lpLabel} displayApr={apr.value} />\r\n      </ActionContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ActionPanel\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Label = styled.div`\r\n  font-size: 12px;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  text-align: left;\r\n`\r\n\r\nconst ContentContainer = styled.div`\r\n  min-height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n`\r\n\r\ninterface CellLayoutProps {\r\n  label?: string\r\n}\r\n\r\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\r\n  return (\r\n    <div>\r\n      {label && <Label>{label}</Label>}\r\n      <ContentContainer>{children}</ContentContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CellLayout\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\r\nimport { useFarmUser } from 'state/farms/hooks'\r\n\r\nimport Apr, { AprProps } from './Apr'\r\nimport Farm, { FarmProps } from './Farm'\r\nimport Earned, { EarnedProps } from './Earned'\r\nimport Details from './Details'\r\nimport Multiplier, { MultiplierProps } from './Multiplier'\r\nimport Liquidity, { LiquidityProps } from './Liquidity'\r\nimport ActionPanel from './Actions/ActionPanel'\r\nimport CellLayout from './CellLayout'\r\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\r\n\r\nexport interface RowProps {\r\n  apr: AprProps\r\n  farm: FarmProps\r\n  earned: EarnedProps\r\n  multiplier: MultiplierProps\r\n  liquidity: LiquidityProps\r\n  details: FarmWithStakedValue\r\n}\r\n\r\ninterface RowPropsWithLoading extends RowProps {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst cells = {\r\n  apr: Apr,\r\n  farm: Farm,\r\n  earned: Earned,\r\n  details: Details,\r\n  multiplier: Multiplier,\r\n  liquidity: Liquidity,\r\n}\r\n\r\nconst CellInner = styled.div`\r\n  padding: 24px 0px;\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  padding-right: 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    padding-right: 32px;\r\n  }\r\n`\r\n\r\nconst StyledTr = styled.tr`\r\n  cursor: pointer;\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst EarnedMobileCell = styled.td`\r\n  padding: 16px 0 24px 16px;\r\n`\r\n\r\nconst AprMobileCell = styled.td`\r\n  padding-top: 16px;\r\n  padding-bottom: 24px;\r\n`\r\n\r\nconst FarmMobileCell = styled.td`\r\n  padding-top: 24px;\r\n`\r\n\r\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\r\n  const { details, userDataReady } = props\r\n  const hasStakedAmount = !!useFarmUser(details.pid).stakedBalance.toNumber()\r\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\r\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\r\n  const { t } = useTranslation()\r\n\r\n  const toggleActionPanel = () => {\r\n    setActionPanelExpanded(!actionPanelExpanded)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setActionPanelExpanded(hasStakedAmount)\r\n  }, [hasStakedAmount])\r\n\r\n  const { isDesktop, isMobile } = useMatchBreakpoints()\r\n\r\n  const isSmallerScreen = !isDesktop\r\n  const tableSchema = isSmallerScreen ? MobileColumnSchema : DesktopColumnSchema\r\n  const columnNames = tableSchema.map((column) => column.name)\r\n\r\n  const handleRenderRow = () => {\r\n    if (!isMobile) {\r\n      return (\r\n        <StyledTr onClick={toggleActionPanel}>\r\n          {Object.keys(props).map((key) => {\r\n            const columnIndex = columnNames.indexOf(key)\r\n            if (columnIndex === -1) {\r\n              return null\r\n            }\r\n\r\n            switch (key) {\r\n              case 'details':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout>\r\n                        <Details actionPanelToggled={actionPanelExpanded} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              case 'apr':\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t('APR')}>\r\n                        <Apr {...props.apr} hideButton={isSmallerScreen} />\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n              default:\r\n                return (\r\n                  <td key={key}>\r\n                    <CellInner>\r\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\r\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\r\n                      </CellLayout>\r\n                    </CellInner>\r\n                  </td>\r\n                )\r\n            }\r\n          })}\r\n        </StyledTr>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <StyledTr onClick={toggleActionPanel}>\r\n        <td>\r\n          <tr>\r\n            <FarmMobileCell>\r\n              <CellLayout>\r\n                <Farm {...props.farm} />\r\n              </CellLayout>\r\n            </FarmMobileCell>\r\n          </tr>\r\n          <tr>\r\n            <EarnedMobileCell>\r\n              <CellLayout label={t('Earned')}>\r\n                <Earned {...props.earned} userDataReady={userDataReady} />\r\n              </CellLayout>\r\n            </EarnedMobileCell>\r\n            <AprMobileCell>\r\n              <CellLayout label={t('APR')}>\r\n                <Apr {...props.apr} hideButton />\r\n              </CellLayout>\r\n            </AprMobileCell>\r\n          </tr>\r\n        </td>\r\n        <td>\r\n          <CellInner>\r\n            <CellLayout>\r\n              <Details actionPanelToggled={actionPanelExpanded} />\r\n            </CellLayout>\r\n          </CellInner>\r\n        </td>\r\n      </StyledTr>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {handleRenderRow()}\r\n      {shouldRenderChild && (\r\n        <tr>\r\n          <td colSpan={6}>\r\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\r\n          </td>\r\n        </tr>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nimport Row, { RowProps } from './Row'\r\n\r\nexport interface ITableProps {\r\n  data: RowProps[]\r\n  columns: ColumnType<RowProps>[]\r\n  userDataReady: boolean\r\n  sortColumn?: string\r\n}\r\n\r\nconst Container = styled.div`\r\n  filter: ${({ theme }) => theme.card.dropShadow};\r\n  width: 100%;\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 16px;\r\n  margin: 16px 0px;\r\n`\r\n\r\nconst TableWrapper = styled.div`\r\n  overflow: visible;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst StyledTable = styled.table`\r\n  border-collapse: collapse;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n`\r\n\r\nconst TableBody = styled.tbody`\r\n  & tr {\r\n    td {\r\n      font-size: 16px;\r\n      vertical-align: middle;\r\n    }\r\n  }\r\n`\r\n\r\nconst TableContainer = styled.div`\r\n  position: relative;\r\n`\r\n\r\nconst ScrollButtonContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n`\r\n\r\nconst FarmTable: React.FC<ITableProps> = (props) => {\r\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\r\n  const { t } = useTranslation()\r\n  const { data, columns, userDataReady } = props\r\n\r\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\r\n\r\n  const scrollToTop = (): void => {\r\n    tableWrapperEl.current.scrollIntoView({\r\n      behavior: 'smooth',\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <TableContainer>\r\n        <TableWrapper ref={tableWrapperEl}>\r\n          <StyledTable>\r\n            <TableBody>\r\n              {rows.map((row) => {\r\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\r\n              })}\r\n            </TableBody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <ScrollButtonContainer>\r\n          <Button variant=\"text\" onClick={scrollToTop}>\r\n            {t('To Top')}\r\n            <ChevronUpIcon color=\"primary\" />\r\n          </Button>\r\n        </ScrollButtonContainer>\r\n      </TableContainer>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default FarmTable\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useLocation, Link, useRouteMatch } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, NotificationDot } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface FarmTabButtonsProps {\r\n  hasStakeInFinishedFarms: boolean\r\n}\r\n\r\nconst FarmTabButtons: React.FC<FarmTabButtonsProps> = ({ hasStakeInFinishedFarms }) => {\r\n  const { url } = useRouteMatch()\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  let activeIndex\r\n  switch (location.pathname) {\r\n    case '/farms':\r\n      activeIndex = 0\r\n      break\r\n    case '/farms/history':\r\n      activeIndex = 1\r\n      break\r\n    case '/farms/archived':\r\n      activeIndex = 2\r\n      break\r\n    default:\r\n      activeIndex = 0\r\n      break\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem as={Link} to={`${url}`}>\r\n          {t('Live')}\r\n        </ButtonMenuItem>\r\n        <NotificationDot show={hasStakeInFinishedFarms}>\r\n          <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n            {t('Finished')}\r\n          </ButtonMenuItem>\r\n        </NotificationDot>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  a {\r\n    padding-left: 12px;\r\n    padding-right: 12px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 16px;\r\n  }\r\n`\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ViewMode } from '../types'\r\n\r\ninterface ToggleViewProps {\r\n  viewMode: ViewMode\r\n  onToggle: (mode: ViewMode) => void\r\n}\r\n\r\nconst Container = styled.div`\r\n  margin-left: -8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    margin-left: 0;\r\n  }\r\n`\r\n\r\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\r\n  const handleToggle = (mode: ViewMode) => {\r\n    if (viewMode !== mode) {\r\n      onToggle(mode)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmCardView\" onClick={() => handleToggle(ViewMode.CARD)}>\r\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n      <IconButton variant=\"text\" scale=\"sm\" id=\"clickFarmTableView\" onClick={() => handleToggle(ViewMode.TABLE)}>\r\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\r\n      </IconButton>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default ToggleView\r\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport { useUserFarmStakedOnly } from 'state/user/hooks'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledImage = styled(Image)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-top: 58px;\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  if (cakeRewardsApr && lpRewardsApr) {\r\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.CARD, { localStorageKey: 'pancake_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const chosenFarmsLength = useRef(0)\r\n\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n\r\n  usePollFarmsWithUserData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n          }\r\n          return farmsCurrentlyVisible\r\n        })\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [chosenFarmsMemoized, observerIsSet])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        pid: farm.pid,\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        lpSymbol: farm.lpSymbol,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('Farms')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {t('Stake LP tokens to earn.')}\r\n        </Heading>\r\n        <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\r\n          <Button p=\"0\" variant=\"text\">\r\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\r\n              {t('Community Auctions')}\r\n            </Text>\r\n            <ArrowForwardIcon color=\"primary\" />\r\n          </Button>\r\n        </NavLink>\r\n      </PageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onOptionChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={loadMoreRef} />\r\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport Container from '../Layout/Container'\r\n\r\nconst Outer = styled(Box)<{ background?: string }>`\r\n  background: ${({ theme, background }) => background || theme.colors.gradients.bubblegum};\r\n`\r\n\r\nconst Inner = styled(Container)`\r\n  padding-top: 32px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst PageHeader: React.FC<{ background?: string }> = ({ background, children, ...props }) => (\r\n  <Outer background={background} {...props}>\r\n    <Inner>{children}</Inner>\r\n  </Outer>\r\n)\r\n\r\nexport default PageHeader\r\n"],"sourceRoot":""}
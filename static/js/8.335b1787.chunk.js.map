{"version":3,"sources":["state/mint/hooks.ts","utils/maxAmountSpend.ts","views/AddLiquidity/ConfirmAddModalBottom.tsx","views/AddLiquidity/PoolPriceBar.tsx","views/AddLiquidity/index.tsx","components/TransactionConfirmationModal/index.tsx","components/Menu/SubNav.tsx","components/CurrencyInputPanel/NumericalInput.tsx","components/CurrencyInputPanel/index.tsx","hooks/useTokenAllowance.ts","hooks/useApproveCallback.ts","hooks/useTransactionDeadline.ts","hooks/useCurrentBlockTimestamp.ts"],"names":["ZERO","JSBI","BigInt","useMintState","useSelector","state","mint","maxAmountSpend","currencyAmount","currency","ETHER","greaterThan","raw","MIN_BNB","CurrencyAmount","ether","subtract","ConfirmAddModalBottom","noLiquidity","price","currencies","parsedAmounts","poolTokenPercentage","onAdd","t","useTranslation","Row","asset","Field","CURRENCY_A","symbol","style","marginRight","toSignificant","CURRENCY_B","justifyContent","invert","onClick","mt","PoolPriceBar","gap","justify","fontSize","color","pt","assetA","assetB","lessThan","ONE_BIPS","toFixed","AddLiquidity","match","params","currencyIdA","currencyIdB","history","useActiveWeb3React","account","chainId","library","gasPrice","useGasPrice","currencyA","useCurrency","currencyB","expertMode","Boolean","currencyEquals","WETH","useIsExpertMode","independentField","typedValue","otherTypedValue","error","dependentField","useMemo","undefined","usePair","pairState","pair","totalSupply","useTotalSupply","liquidityToken","PairState","NOT_EXISTS","equal","balances","useCurrencyBalances","currencyBalances","independentAmount","tryParseAmount","dependentAmount","wrappedIndependentAmount","wrappedCurrencyAmount","wrappedCurrency","tokenA","tokenB","dependentCurrency","dependentTokenAmount","priceOf","quote","currencyAAmount","currencyBAmount","Price","wrappedCurrencyA","liquidityMinted","tokenAmountA","tokenAmountB","getLiquidityMinted","Percent","add","INVALID","useDerivedMintInfo","dispatch","useDispatch","onFieldAInput","useCallback","typeInput","field","onFieldBInput","useMintActionHandlers","isValid","useState","attemptingTxn","setAttemptingTxn","deadline","useTransactionDeadline","useUserSlippageTolerance","allowedSlippage","txHash","setTxHash","formattedAmounts","maxAmounts","reduce","accumulator","atMaxAmounts","equalTo","useApproveCallback","ROUTER_ADDRESS","approvalA","approveACallback","approvalB","approveBCallback","addTransaction","useTransactionAdder","a","router","getRouterContract","parsedAmountA","parsedAmountB","calculateSlippageAmount","amountsMin","tokenBIsETH","estimate","estimateGas","addLiquidityETH","method","args","address","toString","toHexString","value","BigNumber","from","addLiquidity","then","estimatedGasLimit","gasLimit","calculateGasMargin","response","summary","hash","catch","err","code","console","modalHeader","alignItems","currency0","currency1","size","small","textAlign","my","slippage","modalBottom","pendingText","amountA","symbolA","amountB","symbolB","handleCurrencyASelect","currencyA_","newCurrencyIdA","currencyId","push","handleCurrencyBSelect","currencyB_","newCurrencyIdB","handleDismissConfirmation","addIsUnsupported","useIsTransactionUnsupported","useModal","TransactionConfirmationModal","title","customOnDismiss","content","topContent","bottomContent","currencyToAdd","onPresentAddLiquidityModal","Page","App","SubNav","backTo","opacity","subtitle","helper","Column","variant","bold","mb","CurrencyInputPanel","onUserInput","onMax","toExact","onCurrencySelect","showMaxButton","id","showCommonBases","width","padding","borderRadius","disabled","ApprovalState","NOT_APPROVED","PENDING","APPROVED","Dots","ConnectWalletButton","Wrapper","styled","div","Section","AutoColumn","ConfirmedIcon","ColumnCenter","ConfirmationPendingContent","TransactionSubmittedContent","onDismiss","token","strokeWidth","external","href","getBscScanLink","provider","isMetaMask","registerToken","decimals","ml","ConfirmationModalContent","handleDismiss","headerBackground","StyledNav","nav","getActiveIndex","pathname","includes","Nav","location","useLocation","as","Link","to","scale","activeIndex","StyledInput","input","theme","colors","failure","text","align","inputRegex","RegExp","Input","React","memo","placeholder","rest","onChange","event","nextUserInput","target","replace","test","escapeRegExp","inputMode","autoComplete","autoCorrect","type","pattern","minLength","maxLength","spellCheck","InputRow","selected","CurrencySelectButton","Button","attrs","LabelRow","textSubtle","InputPanel","hideInput","background","Container","shadows","inset","label","disableCurrencySelect","hideBalance","otherCurrency","selectedCurrencyBalance","useCurrencyBalance","translatedLabel","CurrencySearchModal","selectedCurrency","otherSelectedCurrency","onPresentCurrencyModal","display","fontWeight","amount","className","val","token0","token1","margin","length","slice","useTokenAllowance","owner","spender","contract","useTokenContract","inputs","allowance","useSingleCallResult","result","TokenAmount","amountToApprove","callWithGasPrice","useCallWithGasPrice","currentAllowance","pendingApproval","useHasPendingApproval","approvalState","UNKNOWN","tokenContract","approve","useExact","MaxUint256","estimatedGas","approval","tokenAddress","ttl","user","userDeadline","blockTimestamp","multicall","useMulticallContract","useCurrentBlockTimestamp"],"mappings":"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","file":"static/js/8.335b1787.chunk.js","sourcesContent":["import { Currency, CurrencyAmount, ETHER, JSBI, Pair, Percent, Price, TokenAmount } from '@pancakeswap/sdk'\r\nimport { useCallback, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { PairState, usePair } from 'hooks/usePairs'\r\nimport useTotalSupply from 'hooks/useTotalSupply'\r\n\r\nimport { wrappedCurrency, wrappedCurrencyAmount } from 'utils/wrappedCurrency'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { tryParseAmount } from '../swap/hooks'\r\nimport { useCurrencyBalances } from '../wallet/hooks'\r\nimport { Field, typeInput } from './actions'\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\n\r\nexport function useMintState(): AppState['mint'] {\r\n  return useSelector<AppState, AppState['mint']>((state) => state.mint)\r\n}\r\n\r\nexport function useMintActionHandlers(noLiquidity: boolean | undefined): {\r\n  onFieldAInput: (typedValue: string) => void\r\n  onFieldBInput: (typedValue: string) => void\r\n} {\r\n  const dispatch = useDispatch<AppDispatch>()\r\n\r\n  const onFieldAInput = useCallback(\r\n    (typedValue: string) => {\r\n      dispatch(typeInput({ field: Field.CURRENCY_A, typedValue, noLiquidity: noLiquidity === true }))\r\n    },\r\n    [dispatch, noLiquidity],\r\n  )\r\n  const onFieldBInput = useCallback(\r\n    (typedValue: string) => {\r\n      dispatch(typeInput({ field: Field.CURRENCY_B, typedValue, noLiquidity: noLiquidity === true }))\r\n    },\r\n    [dispatch, noLiquidity],\r\n  )\r\n\r\n  return {\r\n    onFieldAInput,\r\n    onFieldBInput,\r\n  }\r\n}\r\n\r\nexport function useDerivedMintInfo(\r\n  currencyA: Currency | undefined,\r\n  currencyB: Currency | undefined,\r\n): {\r\n  dependentField: Field\r\n  currencies: { [field in Field]?: Currency }\r\n  pair?: Pair | null\r\n  pairState: PairState\r\n  currencyBalances: { [field in Field]?: CurrencyAmount }\r\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\r\n  price?: Price\r\n  noLiquidity?: boolean\r\n  liquidityMinted?: TokenAmount\r\n  poolTokenPercentage?: Percent\r\n  error?: string\r\n} {\r\n  const { account, chainId } = useActiveWeb3React()\r\n\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n\r\n  const dependentField = independentField === Field.CURRENCY_A ? Field.CURRENCY_B : Field.CURRENCY_A\r\n\r\n  // tokens\r\n  const currencies: { [field in Field]?: Currency } = useMemo(\r\n    () => ({\r\n      [Field.CURRENCY_A]: currencyA ?? undefined,\r\n      [Field.CURRENCY_B]: currencyB ?? undefined,\r\n    }),\r\n    [currencyA, currencyB],\r\n  )\r\n\r\n  // pair\r\n  const [pairState, pair] = usePair(currencies[Field.CURRENCY_A], currencies[Field.CURRENCY_B])\r\n\r\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\r\n\r\n  const noLiquidity: boolean =\r\n    pairState === PairState.NOT_EXISTS || Boolean(totalSupply && JSBI.equal(totalSupply.raw, ZERO))\r\n\r\n  // balances\r\n  const balances = useCurrencyBalances(account ?? undefined, [\r\n    currencies[Field.CURRENCY_A],\r\n    currencies[Field.CURRENCY_B],\r\n  ])\r\n  const currencyBalances: { [field in Field]?: CurrencyAmount } = {\r\n    [Field.CURRENCY_A]: balances[0],\r\n    [Field.CURRENCY_B]: balances[1],\r\n  }\r\n\r\n  // amounts\r\n  const independentAmount: CurrencyAmount | undefined = tryParseAmount(typedValue, currencies[independentField])\r\n  const dependentAmount: CurrencyAmount | undefined = useMemo(() => {\r\n    if (noLiquidity) {\r\n      if (otherTypedValue && currencies[dependentField]) {\r\n        return tryParseAmount(otherTypedValue, currencies[dependentField])\r\n      }\r\n      return undefined\r\n    }\r\n    if (independentAmount) {\r\n      // we wrap the currencies just to get the price in terms of the other token\r\n      const wrappedIndependentAmount = wrappedCurrencyAmount(independentAmount, chainId)\r\n      const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\r\n      if (tokenA && tokenB && wrappedIndependentAmount && pair) {\r\n        const dependentCurrency = dependentField === Field.CURRENCY_B ? currencyB : currencyA\r\n        const dependentTokenAmount =\r\n          dependentField === Field.CURRENCY_B\r\n            ? pair.priceOf(tokenA).quote(wrappedIndependentAmount)\r\n            : pair.priceOf(tokenB).quote(wrappedIndependentAmount)\r\n        return dependentCurrency === ETHER ? CurrencyAmount.ether(dependentTokenAmount.raw) : dependentTokenAmount\r\n      }\r\n      return undefined\r\n    }\r\n    return undefined\r\n  }, [noLiquidity, otherTypedValue, currencies, dependentField, independentAmount, currencyA, chainId, currencyB, pair])\r\n\r\n  const parsedAmounts: { [field in Field]: CurrencyAmount | undefined } = useMemo(\r\n    () => ({\r\n      [Field.CURRENCY_A]: independentField === Field.CURRENCY_A ? independentAmount : dependentAmount,\r\n      [Field.CURRENCY_B]: independentField === Field.CURRENCY_A ? dependentAmount : independentAmount,\r\n    }),\r\n    [dependentAmount, independentAmount, independentField],\r\n  )\r\n\r\n  const price = useMemo(() => {\r\n    if (noLiquidity) {\r\n      const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n      if (currencyAAmount && currencyBAmount) {\r\n        return new Price(currencyAAmount.currency, currencyBAmount.currency, currencyAAmount.raw, currencyBAmount.raw)\r\n      }\r\n      return undefined\r\n    }\r\n    const wrappedCurrencyA = wrappedCurrency(currencyA, chainId)\r\n    return pair && wrappedCurrencyA ? pair.priceOf(wrappedCurrencyA) : undefined\r\n  }, [chainId, currencyA, noLiquidity, pair, parsedAmounts])\r\n\r\n  // liquidity minted\r\n  const liquidityMinted = useMemo(() => {\r\n    const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n    const [tokenAmountA, tokenAmountB] = [\r\n      wrappedCurrencyAmount(currencyAAmount, chainId),\r\n      wrappedCurrencyAmount(currencyBAmount, chainId),\r\n    ]\r\n    if (pair && totalSupply && tokenAmountA && tokenAmountB) {\r\n      return pair.getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB)\r\n    }\r\n    return undefined\r\n  }, [parsedAmounts, chainId, pair, totalSupply])\r\n\r\n  const poolTokenPercentage = useMemo(() => {\r\n    if (liquidityMinted && totalSupply) {\r\n      return new Percent(liquidityMinted.raw, totalSupply.add(liquidityMinted).raw)\r\n    }\r\n    return undefined\r\n  }, [liquidityMinted, totalSupply])\r\n\r\n  let error: string | undefined\r\n  if (!account) {\r\n    error = 'Connect Wallet'\r\n  }\r\n\r\n  if (pairState === PairState.INVALID) {\r\n    error = error ?? 'Invalid pair'\r\n  }\r\n\r\n  if (!parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\r\n    error = error ?? 'Enter an amount'\r\n  }\r\n\r\n  const { [Field.CURRENCY_A]: currencyAAmount, [Field.CURRENCY_B]: currencyBAmount } = parsedAmounts\r\n\r\n  if (currencyAAmount && currencyBalances?.[Field.CURRENCY_A]?.lessThan(currencyAAmount)) {\r\n    error = `Insufficient ${currencies[Field.CURRENCY_A]?.symbol} balance`\r\n  }\r\n\r\n  if (currencyBAmount && currencyBalances?.[Field.CURRENCY_B]?.lessThan(currencyBAmount)) {\r\n    error = `Insufficient ${currencies[Field.CURRENCY_B]?.symbol} balance`\r\n  }\r\n\r\n  return {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    liquidityMinted,\r\n    poolTokenPercentage,\r\n    error,\r\n  }\r\n}\r\n","import { CurrencyAmount, ETHER, JSBI } from '@pancakeswap/sdk'\r\nimport { MIN_BNB } from '../config/constants'\r\n\r\n/**\r\n * Given some token amount, return the max that can be spent of it\r\n * @param currencyAmount to return max of\r\n */\r\nexport function maxAmountSpend(currencyAmount?: CurrencyAmount): CurrencyAmount | undefined {\r\n  if (!currencyAmount) return undefined\r\n  if (currencyAmount.currency === ETHER) {\r\n    if (JSBI.greaterThan(currencyAmount.raw, MIN_BNB)) {\r\n      return CurrencyAmount.ether(JSBI.subtract(currencyAmount.raw, MIN_BNB))\r\n    }\r\n    return CurrencyAmount.ether(JSBI.BigInt(0))\r\n  }\r\n  return currencyAmount\r\n}\r\n\r\nexport default maxAmountSpend\r\n","import { Currency, CurrencyAmount, Fraction, Percent } from '@pancakeswap/sdk'\r\nimport React from 'react'\r\nimport { Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { RowBetween, RowFixed } from '../../components/Layout/Row'\r\nimport { CurrencyLogo } from '../../components/Logo'\r\nimport { Field } from '../../state/mint/actions'\r\n\r\nfunction ConfirmAddModalBottom({\r\n  noLiquidity,\r\n  price,\r\n  currencies,\r\n  parsedAmounts,\r\n  poolTokenPercentage,\r\n  onAdd,\r\n}: {\r\n  noLiquidity?: boolean\r\n  price?: Fraction\r\n  currencies: { [field in Field]?: Currency }\r\n  parsedAmounts: { [field in Field]?: CurrencyAmount }\r\n  poolTokenPercentage?: Percent\r\n  onAdd: () => void\r\n}) {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <>\r\n      <RowBetween>\r\n        <Text>{t('%asset% Deposited', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Text>\r\n        <RowFixed>\r\n          <CurrencyLogo currency={currencies[Field.CURRENCY_A]} style={{ marginRight: '8px' }} />\r\n          <Text>{parsedAmounts[Field.CURRENCY_A]?.toSignificant(6)}</Text>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <Text>{t('%asset% Deposited', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Text>\r\n        <RowFixed>\r\n          <CurrencyLogo currency={currencies[Field.CURRENCY_B]} style={{ marginRight: '8px' }} />\r\n          <Text>{parsedAmounts[Field.CURRENCY_B]?.toSignificant(6)}</Text>\r\n        </RowFixed>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <Text>{t('Rates')}</Text>\r\n        <Text>\r\n          {`1 ${currencies[Field.CURRENCY_A]?.symbol} = ${price?.toSignificant(4)} ${\r\n            currencies[Field.CURRENCY_B]?.symbol\r\n          }`}\r\n        </Text>\r\n      </RowBetween>\r\n      <RowBetween style={{ justifyContent: 'flex-end' }}>\r\n        <Text>\r\n          {`1 ${currencies[Field.CURRENCY_B]?.symbol} = ${price?.invert().toSignificant(4)} ${\r\n            currencies[Field.CURRENCY_A]?.symbol\r\n          }`}\r\n        </Text>\r\n      </RowBetween>\r\n      <RowBetween>\r\n        <Text>{t('Share of Pool')}:</Text>\r\n        <Text>{noLiquidity ? '100' : poolTokenPercentage?.toSignificant(4)}%</Text>\r\n      </RowBetween>\r\n      <Button onClick={onAdd} mt=\"20px\">\r\n        {noLiquidity ? t('Create Pool & Supply') : t('Confirm Supply')}\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ConfirmAddModalBottom\r\n","import { Currency, Percent, Price } from '@pancakeswap/sdk'\r\nimport React from 'react'\r\nimport { Text, Span } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { AutoColumn } from '../../components/Layout/Column'\r\nimport { AutoRow } from '../../components/Layout/Row'\r\nimport { ONE_BIPS } from '../../config/constants'\r\nimport { Field } from '../../state/mint/actions'\r\n\r\nfunction PoolPriceBar({\r\n  currencies,\r\n  noLiquidity,\r\n  poolTokenPercentage,\r\n  price,\r\n}: {\r\n  currencies: { [field in Field]?: Currency }\r\n  noLiquidity?: boolean\r\n  poolTokenPercentage?: Percent\r\n  price?: Price\r\n}) {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <AutoColumn gap=\"md\">\r\n      <AutoRow justify=\"space-between\">\r\n        <AutoColumn justify=\"start\">\r\n          <Text fontSize=\"14px\" color=\"primaryBright\">{price?.toSignificant(6) ?? '-'}</Text>\r\n          <Text fontSize=\"12px\" pt={1}>\r\n            {t('%assetA%', {\r\n              assetA: currencies[Field.CURRENCY_B]?.symbol ?? '',\r\n            })}\r\n            <Span color=\"textSubtle\">\r\n              {t(' per ')}\r\n            </Span>\r\n            {t('%assetB%', {\r\n              assetB: currencies[Field.CURRENCY_A]?.symbol ?? '',\r\n            })}\r\n          </Text>\r\n        </AutoColumn>\r\n        <AutoColumn justify=\"center\">\r\n          <Text fontSize=\"14px\" color=\"primaryBright\">{price?.invert()?.toSignificant(6) ?? '-'}</Text>\r\n          <Text fontSize=\"12px\" pt={1}>\r\n            {t('%assetA%', {\r\n              assetA: currencies[Field.CURRENCY_A]?.symbol ?? '',\r\n            })}\r\n            <Span color=\"textSubtle\">\r\n              {t(' per ')}\r\n            </Span>\r\n            {t('%assetB%', {\r\n              assetB: currencies[Field.CURRENCY_B]?.symbol ?? '',\r\n            })}\r\n          </Text>\r\n        </AutoColumn>\r\n        <AutoColumn justify=\"end\">\r\n          <Text fontSize=\"14px\" color=\"primaryBright\">\r\n            {noLiquidity && price\r\n              ? '100'\r\n              : (poolTokenPercentage?.lessThan(ONE_BIPS) ? '<0.01' : poolTokenPercentage?.toFixed(2)) ?? '0'}\r\n            %\r\n          </Text>\r\n          <Text fontSize=\"12px\" pt={1}>\r\n            {t('Share of Pool')}\r\n          </Text>\r\n        </AutoColumn>\r\n      </AutoRow>\r\n    </AutoColumn>\r\n  )\r\n}\r\n\r\nexport default PoolPriceBar\r\n","import React, { useCallback, useState } from 'react'\r\nimport { BigNumber } from '@ethersproject/bignumber'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Currency, currencyEquals, ETHER, TokenAmount, WETH } from '@pancakeswap/sdk'\r\nimport { Button, Text, Flex, AddIcon, CardBody, Message, useModal, CardDivider } from '@pancakeswap/uikit'\r\nimport { RouteComponentProps } from 'react-router-dom'\r\nimport { useIsTransactionUnsupported } from 'hooks/Trades'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport UnsupportedCurrencyFooter from 'components/UnsupportedCurrencyFooter'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { LightCard } from '../../components/Card'\r\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\r\nimport TransactionConfirmationModal, { ConfirmationModalContent } from '../../components/TransactionConfirmationModal'\r\nimport CurrencyInputPanel from '../../components/CurrencyInputPanel'\r\nimport { DoubleCurrencyLogo } from '../../components/Logo'\r\nimport { AppHeader, AppBody } from '../../components/App'\r\nimport { MinimalPositionCard } from '../../components/PositionCard'\r\nimport Row, { RowBetween } from '../../components/Layout/Row'\r\nimport ConnectWalletButton from '../../components/ConnectWalletButton'\r\nimport SubNav from '../../components/Menu/SubNav'\r\n\r\nimport { ROUTER_ADDRESS } from '../../config/constants'\r\nimport { PairState } from '../../hooks/usePairs'\r\nimport { useCurrency } from '../../hooks/Tokens'\r\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\r\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\r\nimport { Field } from '../../state/mint/actions'\r\nimport { useDerivedMintInfo, useMintActionHandlers, useMintState } from '../../state/mint/hooks'\r\n\r\nimport { useTransactionAdder } from '../../state/transactions/hooks'\r\nimport { useGasPrice, useIsExpertMode, useUserSlippageTolerance } from '../../state/user/hooks'\r\nimport { calculateGasMargin, calculateSlippageAmount, getRouterContract } from '../../utils'\r\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\r\nimport { wrappedCurrency } from '../../utils/wrappedCurrency'\r\nimport Dots from '../../components/Loader/Dots'\r\nimport ConfirmAddModalBottom from './ConfirmAddModalBottom'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport PoolPriceBar from './PoolPriceBar'\r\nimport Page from '../Page'\r\n\r\nexport default function AddLiquidity({\r\n  match: {\r\n    params: { currencyIdA, currencyIdB },\r\n  },\r\n  history,\r\n}: RouteComponentProps<{ currencyIdA?: string; currencyIdB?: string }>) {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n  const gasPrice = useGasPrice()\r\n\r\n  const currencyA = useCurrency(currencyIdA)\r\n  const currencyB = useCurrency(currencyIdB)\r\n\r\n  const oneCurrencyIsWETH = Boolean(\r\n    chainId &&\r\n      ((currencyA && currencyEquals(currencyA, WETH[chainId])) ||\r\n        (currencyB && currencyEquals(currencyB, WETH[chainId]))),\r\n  )\r\n\r\n  const expertMode = useIsExpertMode()\r\n\r\n  // mint state\r\n  const { independentField, typedValue, otherTypedValue } = useMintState()\r\n  const {\r\n    dependentField,\r\n    currencies,\r\n    pair,\r\n    pairState,\r\n    currencyBalances,\r\n    parsedAmounts,\r\n    price,\r\n    noLiquidity,\r\n    liquidityMinted,\r\n    poolTokenPercentage,\r\n    error,\r\n  } = useDerivedMintInfo(currencyA ?? undefined, currencyB ?? undefined)\r\n\r\n  const { onFieldAInput, onFieldBInput } = useMintActionHandlers(noLiquidity)\r\n\r\n  const isValid = !error\r\n\r\n  // modal and loading\r\n  const [attemptingTxn, setAttemptingTxn] = useState<boolean>(false) // clicked confirm\r\n\r\n  // txn values\r\n  const deadline = useTransactionDeadline() // custom from users settings\r\n  const [allowedSlippage] = useUserSlippageTolerance() // custom from users\r\n  const [txHash, setTxHash] = useState<string>('')\r\n\r\n  // get formatted amounts\r\n  const formattedAmounts = {\r\n    [independentField]: typedValue,\r\n    [dependentField]: noLiquidity ? otherTypedValue : parsedAmounts[dependentField]?.toSignificant(6) ?? '',\r\n  }\r\n\r\n  // get the max amounts user can add\r\n  const maxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmountSpend(currencyBalances[field]),\r\n      }\r\n    },\r\n    {},\r\n  )\r\n\r\n  const atMaxAmounts: { [field in Field]?: TokenAmount } = [Field.CURRENCY_A, Field.CURRENCY_B].reduce(\r\n    (accumulator, field) => {\r\n      return {\r\n        ...accumulator,\r\n        [field]: maxAmounts[field]?.equalTo(parsedAmounts[field] ?? '0'),\r\n      }\r\n    },\r\n    {},\r\n  )\r\n\r\n  // check whether the user has approved the router on the tokens\r\n  const [approvalA, approveACallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_A], ROUTER_ADDRESS)\r\n  const [approvalB, approveBCallback] = useApproveCallback(parsedAmounts[Field.CURRENCY_B], ROUTER_ADDRESS)\r\n\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  async function onAdd() {\r\n    if (!chainId || !library || !account) return\r\n    const router = getRouterContract(chainId, library, account)\r\n\r\n    const { [Field.CURRENCY_A]: parsedAmountA, [Field.CURRENCY_B]: parsedAmountB } = parsedAmounts\r\n    if (!parsedAmountA || !parsedAmountB || !currencyA || !currencyB || !deadline) {\r\n      return\r\n    }\r\n\r\n    const amountsMin = {\r\n      [Field.CURRENCY_A]: calculateSlippageAmount(parsedAmountA, noLiquidity ? 0 : allowedSlippage)[0],\r\n      [Field.CURRENCY_B]: calculateSlippageAmount(parsedAmountB, noLiquidity ? 0 : allowedSlippage)[0],\r\n    }\r\n\r\n    let estimate\r\n    let method: (...args: any) => Promise<TransactionResponse>\r\n    let args: Array<string | string[] | number>\r\n    let value: BigNumber | null\r\n    if (currencyA === ETHER || currencyB === ETHER) {\r\n      const tokenBIsETH = currencyB === ETHER\r\n      estimate = router.estimateGas.addLiquidityETH\r\n      method = router.addLiquidityETH\r\n      args = [\r\n        wrappedCurrency(tokenBIsETH ? currencyA : currencyB, chainId)?.address ?? '', // token\r\n        (tokenBIsETH ? parsedAmountA : parsedAmountB).raw.toString(), // token desired\r\n        amountsMin[tokenBIsETH ? Field.CURRENCY_A : Field.CURRENCY_B].toString(), // token min\r\n        amountsMin[tokenBIsETH ? Field.CURRENCY_B : Field.CURRENCY_A].toString(), // eth min\r\n        account,\r\n        deadline.toHexString(),\r\n      ]\r\n      value = BigNumber.from((tokenBIsETH ? parsedAmountB : parsedAmountA).raw.toString())\r\n    } else {\r\n      estimate = router.estimateGas.addLiquidity\r\n      method = router.addLiquidity\r\n      args = [\r\n        wrappedCurrency(currencyA, chainId)?.address ?? '',\r\n        wrappedCurrency(currencyB, chainId)?.address ?? '',\r\n        parsedAmountA.raw.toString(),\r\n        parsedAmountB.raw.toString(),\r\n        amountsMin[Field.CURRENCY_A].toString(),\r\n        amountsMin[Field.CURRENCY_B].toString(),\r\n        account,\r\n        deadline.toHexString(),\r\n      ]\r\n      value = null\r\n    }\r\n\r\n    setAttemptingTxn(true)\r\n    await estimate(...args, value ? { value } : {})\r\n      .then((estimatedGasLimit) =>\r\n        method(...args, {\r\n          ...(value ? { value } : {}),\r\n          gasLimit: calculateGasMargin(estimatedGasLimit),\r\n          gasPrice,\r\n        }).then((response) => {\r\n          setAttemptingTxn(false)\r\n\r\n          addTransaction(response, {\r\n            summary: `Add ${parsedAmounts[Field.CURRENCY_A]?.toSignificant(3)} ${\r\n              currencies[Field.CURRENCY_A]?.symbol\r\n            } and ${parsedAmounts[Field.CURRENCY_B]?.toSignificant(3)} ${currencies[Field.CURRENCY_B]?.symbol}`,\r\n          })\r\n\r\n          setTxHash(response.hash)\r\n        }),\r\n      )\r\n      .catch((err) => {\r\n        setAttemptingTxn(false)\r\n        // we only care if the error is something _other_ than the user rejected the tx\r\n        if (err?.code !== 4001) {\r\n          console.error(err)\r\n        }\r\n      })\r\n  }\r\n\r\n  const modalHeader = () => {\r\n    return noLiquidity ? (\r\n      <Flex alignItems=\"center\">\r\n        <Text fontSize=\"48px\" marginRight=\"10px\">\r\n          {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol}`}\r\n        </Text>\r\n        <DoubleCurrencyLogo\r\n          currency0={currencies[Field.CURRENCY_A]}\r\n          currency1={currencies[Field.CURRENCY_B]}\r\n          size={30}\r\n        />\r\n      </Flex>\r\n    ) : (\r\n      <AutoColumn>\r\n        <Flex alignItems=\"center\">\r\n          <Text fontSize=\"48px\" marginRight=\"10px\">\r\n            {liquidityMinted?.toSignificant(6)}\r\n          </Text>\r\n          <DoubleCurrencyLogo\r\n            currency0={currencies[Field.CURRENCY_A]}\r\n            currency1={currencies[Field.CURRENCY_B]}\r\n            size={30}\r\n          />\r\n        </Flex>\r\n        <Row>\r\n          <Text fontSize=\"24px\">\r\n            {`${currencies[Field.CURRENCY_A]?.symbol}/${currencies[Field.CURRENCY_B]?.symbol} Pool Tokens`}\r\n          </Text>\r\n        </Row>\r\n        <Text small textAlign=\"left\" my=\"24px\">\r\n          {t('Output is estimated. If the price changes by more than %slippage%% your transaction will revert.', {\r\n            slippage: allowedSlippage / 100,\r\n          })}\r\n        </Text>\r\n      </AutoColumn>\r\n    )\r\n  }\r\n\r\n  const modalBottom = () => {\r\n    return (\r\n      <ConfirmAddModalBottom\r\n        price={price}\r\n        currencies={currencies}\r\n        parsedAmounts={parsedAmounts}\r\n        noLiquidity={noLiquidity}\r\n        onAdd={onAdd}\r\n        poolTokenPercentage={poolTokenPercentage}\r\n      />\r\n    )\r\n  }\r\n\r\n  const pendingText = t('Supplying %amountA% %symbolA% and %amountB% %symbolB%', {\r\n    amountA: parsedAmounts[Field.CURRENCY_A]?.toSignificant(6) ?? '',\r\n    symbolA: currencies[Field.CURRENCY_A]?.symbol ?? '',\r\n    amountB: parsedAmounts[Field.CURRENCY_B]?.toSignificant(6) ?? '',\r\n    symbolB: currencies[Field.CURRENCY_B]?.symbol ?? '',\r\n  })\r\n\r\n  const handleCurrencyASelect = useCallback(\r\n    (currencyA_: Currency) => {\r\n      const newCurrencyIdA = currencyId(currencyA_)\r\n      if (newCurrencyIdA === currencyIdB) {\r\n        history.push(`/add/${currencyIdB}/${currencyIdA}`)\r\n      } else {\r\n        history.push(`/add/${newCurrencyIdA}/${currencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdB, history, currencyIdA],\r\n  )\r\n  const handleCurrencyBSelect = useCallback(\r\n    (currencyB_: Currency) => {\r\n      const newCurrencyIdB = currencyId(currencyB_)\r\n      if (currencyIdA === newCurrencyIdB) {\r\n        if (currencyIdB) {\r\n          history.push(`/add/${currencyIdB}/${newCurrencyIdB}`)\r\n        } else {\r\n          history.push(`/add/${newCurrencyIdB}`)\r\n        }\r\n      } else {\r\n        history.push(`/add/${currencyIdA || 'BNB'}/${newCurrencyIdB}`)\r\n      }\r\n    },\r\n    [currencyIdA, history, currencyIdB],\r\n  )\r\n\r\n  const handleDismissConfirmation = useCallback(() => {\r\n    // if there was a tx hash, we want to clear the input\r\n    if (txHash) {\r\n      onFieldAInput('')\r\n    }\r\n    setTxHash('')\r\n  }, [onFieldAInput, txHash])\r\n\r\n  const addIsUnsupported = useIsTransactionUnsupported(currencies?.CURRENCY_A, currencies?.CURRENCY_B)\r\n\r\n  const [onPresentAddLiquidityModal] = useModal(\r\n    <TransactionConfirmationModal\r\n      title={noLiquidity ? t('You are creating a pool') : t('You will receive')}\r\n      customOnDismiss={handleDismissConfirmation}\r\n      attemptingTxn={attemptingTxn}\r\n      hash={txHash}\r\n      content={() => <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />}\r\n      pendingText={pendingText}\r\n      currencyToAdd={pair?.liquidityToken}\r\n    />,\r\n    true,\r\n    true,\r\n    'addLiquidityModal',\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <AppBody>\r\n        <div style={{marginRight: '16px'}}>\r\n          <SubNav backTo=\"/pool\"/>\r\n        </div>\r\n        <CardDivider opacity={0.6} />\r\n        <AppHeader\r\n          title={t('Add Liquidity')}\r\n          subtitle={t('Add liquidity to receive LP tokens')}\r\n          helper={t(\r\n            'Liquidity providers earn a 0.17% trading fee on all trades made for that token pair, proportional to their share of the liquidity pool.',\r\n          )}\r\n        />\r\n        <CardBody>\r\n          <AutoColumn gap=\"20px\">\r\n            {noLiquidity && (\r\n              <ColumnCenter>\r\n                <Message variant=\"warning\">\r\n                  <div>\r\n                    <Text bold mb=\"8px\">\r\n                      {t('You are the first liquidity provider.')}\r\n                    </Text>\r\n                    <Text mb=\"8px\">{t('The ratio of tokens you add will set the price of this pool.')}</Text>\r\n                    <Text>{t('Once you are happy with the rate click supply to review.')}</Text>\r\n                  </div>\r\n                </Message>\r\n              </ColumnCenter>\r\n            )}\r\n            <CurrencyInputPanel\r\n              value={formattedAmounts[Field.CURRENCY_A]}\r\n              onUserInput={onFieldAInput}\r\n              onMax={() => {\r\n                onFieldAInput(maxAmounts[Field.CURRENCY_A]?.toExact() ?? '')\r\n              }}\r\n              onCurrencySelect={handleCurrencyASelect}\r\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_A]}\r\n              currency={currencies[Field.CURRENCY_A]}\r\n              id=\"add-liquidity-input-tokena\"\r\n              showCommonBases\r\n            />\r\n            <ColumnCenter>\r\n              <AddIcon width=\"24px\" />\r\n            </ColumnCenter>\r\n            <CurrencyInputPanel\r\n              value={formattedAmounts[Field.CURRENCY_B]}\r\n              onUserInput={onFieldBInput}\r\n              onCurrencySelect={handleCurrencyBSelect}\r\n              onMax={() => {\r\n                onFieldBInput(maxAmounts[Field.CURRENCY_B]?.toExact() ?? '')\r\n              }}\r\n              showMaxButton={!atMaxAmounts[Field.CURRENCY_B]}\r\n              currency={currencies[Field.CURRENCY_B]}\r\n              id=\"add-liquidity-input-tokenb\"\r\n              showCommonBases\r\n            />\r\n            {currencies[Field.CURRENCY_A] && currencies[Field.CURRENCY_B] && pairState !== PairState.INVALID && (\r\n              <>\r\n                <LightCard padding=\"20px 0px 0px 0px\" borderRadius=\"20px\">\r\n                  <RowBetween>\r\n                    <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                      {noLiquidity ? t('Initial prices and pool share') : t('Prices and pool share')}\r\n                    </Text>\r\n                  </RowBetween>{' '}\r\n                  <LightCard padding=\"20px 0px\" borderRadius=\"20px\">\r\n                    <PoolPriceBar\r\n                      currencies={currencies}\r\n                      poolTokenPercentage={poolTokenPercentage}\r\n                      noLiquidity={noLiquidity}\r\n                      price={price}\r\n                    />\r\n                  </LightCard>\r\n                </LightCard>\r\n              </>\r\n            )}\r\n\r\n            {addIsUnsupported ? (\r\n              <Button disabled mb=\"4px\">\r\n                {t('Unsupported Asset')}\r\n              </Button>\r\n            ) : !account ? (\r\n              <ConnectWalletButton />\r\n            ) : (\r\n              <AutoColumn gap=\"md\">\r\n                {(approvalA === ApprovalState.NOT_APPROVED ||\r\n                  approvalA === ApprovalState.PENDING ||\r\n                  approvalB === ApprovalState.NOT_APPROVED ||\r\n                  approvalB === ApprovalState.PENDING) &&\r\n                  isValid && (\r\n                    <RowBetween>\r\n                      {approvalA !== ApprovalState.APPROVED && (\r\n                        <Button\r\n                          onClick={approveACallback}\r\n                          disabled={approvalA === ApprovalState.PENDING}\r\n                          width={approvalB !== ApprovalState.APPROVED ? '48%' : '100%'}\r\n                        >\r\n                          {approvalA === ApprovalState.PENDING ? (\r\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })}</Dots>\r\n                          ) : (\r\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_A]?.symbol })\r\n                          )}\r\n                        </Button>\r\n                      )}\r\n                      {approvalB !== ApprovalState.APPROVED && (\r\n                        <Button\r\n                          onClick={approveBCallback}\r\n                          disabled={approvalB === ApprovalState.PENDING}\r\n                          width={approvalA !== ApprovalState.APPROVED ? '48%' : '100%'}\r\n                        >\r\n                          {approvalB === ApprovalState.PENDING ? (\r\n                            <Dots>{t('Enabling %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })}</Dots>\r\n                          ) : (\r\n                            t('Enable %asset%', { asset: currencies[Field.CURRENCY_B]?.symbol })\r\n                          )}\r\n                        </Button>\r\n                      )}\r\n                    </RowBetween>\r\n                  )}\r\n                <Button\r\n                  variant={\r\n                    !isValid && !!parsedAmounts[Field.CURRENCY_A] && !!parsedAmounts[Field.CURRENCY_B]\r\n                      ? 'danger'\r\n                      : 'primary'\r\n                  }\r\n                  onClick={() => {\r\n                    if (expertMode) {\r\n                      onAdd()\r\n                    } else {\r\n                      onPresentAddLiquidityModal()\r\n                    }\r\n                  }}\r\n                  disabled={!isValid || approvalA !== ApprovalState.APPROVED || approvalB !== ApprovalState.APPROVED}\r\n                >\r\n                  {error ?? t('Supply')}\r\n                </Button>\r\n              </AutoColumn>\r\n            )}\r\n          </AutoColumn>\r\n        </CardBody>\r\n      </AppBody>\r\n      {/* {!addIsUnsupported ? (\r\n        pair && !noLiquidity && pairState !== PairState.INVALID ? (\r\n          <AutoColumn style={{ minWidth: '20rem', width: '100%', maxWidth: '400px', marginTop: '1rem' }}>\r\n            <MinimalPositionCard showUnwrapped={oneCurrencyIsWETH} pair={pair} />\r\n          </AutoColumn>\r\n        ) : null\r\n      ) : (\r\n        <UnsupportedCurrencyFooter currencies={[currencies.CURRENCY_A, currencies.CURRENCY_B]} />\r\n      )} */}\r\n    </Page>\r\n  )\r\n}\r\n","import React, { useCallback } from 'react'\r\nimport { ChainId, Currency, Token } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Button,\r\n  Text,\r\n  ErrorIcon,\r\n  ArrowUpIcon,\r\n  MetamaskIcon,\r\n  Flex,\r\n  Box,\r\n  Link,\r\n  Spinner,\r\n  Modal,\r\n  InjectedModalProps,\r\n} from '@pancakeswap/uikit'\r\nimport { registerToken } from 'utils/wallet'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\r\nimport { RowFixed } from '../Layout/Row'\r\nimport { AutoColumn, ColumnCenter } from '../Layout/Column'\r\nimport { getBscScanLink } from '../../utils'\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n`\r\nconst Section = styled(AutoColumn)`\r\n  padding: 24px;\r\n`\r\n\r\nconst ConfirmedIcon = styled(ColumnCenter)`\r\n  padding: 24px 0;\r\n`\r\n\r\nfunction ConfirmationPendingContent({ pendingText }: { pendingText: string }) {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Wrapper>\r\n      <ConfirmedIcon>\r\n        <Spinner />\r\n      </ConfirmedIcon>\r\n      <AutoColumn gap=\"12px\" justify=\"center\">\r\n        <Text fontSize=\"20px\">{t('Waiting For Confirmation')}</Text>\r\n        <AutoColumn gap=\"12px\" justify=\"center\">\r\n          <Text bold small textAlign=\"center\">\r\n            {pendingText}\r\n          </Text>\r\n        </AutoColumn>\r\n        <Text small color=\"textSubtle\" textAlign=\"center\">\r\n          {t('Confirm this transaction in your wallet')}\r\n        </Text>\r\n      </AutoColumn>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nfunction TransactionSubmittedContent({\r\n  onDismiss,\r\n  chainId,\r\n  hash,\r\n  currencyToAdd,\r\n}: {\r\n  onDismiss: () => void\r\n  hash: string | undefined\r\n  chainId: ChainId\r\n  currencyToAdd?: Currency | undefined\r\n}) {\r\n  const { library } = useActiveWeb3React()\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const token: Token | undefined = wrappedCurrency(currencyToAdd, chainId)\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Section>\r\n        <ConfirmedIcon>\r\n          <ArrowUpIcon strokeWidth={0.5} width=\"90px\" color=\"primary\" />\r\n        </ConfirmedIcon>\r\n        <AutoColumn gap=\"12px\" justify=\"center\">\r\n          <Text fontSize=\"20px\">{t('Transaction Submitted')}</Text>\r\n          {chainId && hash && (\r\n            <Link external small href={getBscScanLink(hash, 'transaction', chainId)}>\r\n              {t('View on BscScan')}\r\n            </Link>\r\n          )}\r\n          {currencyToAdd && library?.provider?.isMetaMask && (\r\n            <Button\r\n              variant=\"tertiary\"\r\n              mt=\"12px\"\r\n              width=\"fit-content\"\r\n              onClick={() => registerToken(token.address, token.symbol, token.decimals)}\r\n            >\r\n              <RowFixed>\r\n                {t('Add %asset% to Metamask', { asset: currencyToAdd.symbol })}\r\n                <MetamaskIcon width=\"16px\" ml=\"6px\" />\r\n              </RowFixed>\r\n            </Button>\r\n          )}\r\n          <Button onClick={onDismiss} mt=\"20px\">\r\n            {t('Close')}\r\n          </Button>\r\n        </AutoColumn>\r\n      </Section>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport function ConfirmationModalContent({\r\n  bottomContent,\r\n  topContent,\r\n}: {\r\n  topContent: () => React.ReactNode\r\n  bottomContent: () => React.ReactNode\r\n}) {\r\n  return (\r\n    <Wrapper>\r\n      <Box>{topContent()}</Box>\r\n      <Box>{bottomContent()}</Box>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport function TransactionErrorContent({ message, onDismiss }: { message: string; onDismiss: () => void }) {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <Wrapper>\r\n      <AutoColumn justify=\"center\">\r\n        <ErrorIcon color=\"failure\" width=\"64px\" />\r\n        <Text color=\"failure\" style={{ textAlign: 'center', width: '85%' }}>\r\n          {message}\r\n        </Text>\r\n      </AutoColumn>\r\n\r\n      <Flex justifyContent=\"center\" pt=\"24px\">\r\n        <Button onClick={onDismiss}>{t('Dismiss')}</Button>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\ninterface ConfirmationModalProps {\r\n  title: string\r\n  customOnDismiss?: () => void\r\n  hash: string | undefined\r\n  content: () => React.ReactNode\r\n  attemptingTxn: boolean\r\n  pendingText: string\r\n  currencyToAdd?: Currency | undefined\r\n}\r\n\r\nconst TransactionConfirmationModal: React.FC<InjectedModalProps & ConfirmationModalProps> = ({\r\n  title,\r\n  onDismiss,\r\n  customOnDismiss,\r\n  attemptingTxn,\r\n  hash,\r\n  pendingText,\r\n  content,\r\n  currencyToAdd,\r\n}) => {\r\n  const { chainId } = useActiveWeb3React()\r\n\r\n  const handleDismiss = useCallback(() => {\r\n    if (customOnDismiss) {\r\n      customOnDismiss()\r\n    }\r\n    onDismiss()\r\n  }, [customOnDismiss, onDismiss])\r\n\r\n  if (!chainId) return null\r\n\r\n  return (\r\n    <Modal title={title} headerBackground=\"gradients.cardHeader\" onDismiss={handleDismiss}>\r\n      {attemptingTxn ? (\r\n        <ConfirmationPendingContent pendingText={pendingText} />\r\n      ) : hash ? (\r\n        <TransactionSubmittedContent\r\n          chainId={chainId}\r\n          hash={hash}\r\n          onDismiss={onDismiss}\r\n          currencyToAdd={currencyToAdd}\r\n        />\r\n      ) : (\r\n        content()\r\n      )}\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransactionConfirmationModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, IconButton, ArrowBackIcon, Flex } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { RowBetween } from '../Layout/Row'\r\n\r\ninterface Props {\r\n  backTo?: string\r\n}\r\n\r\nconst StyledNav = styled.nav`\r\n  margin-bottom: 10px;\r\n  text-align: right;\r\n  padding: 10px 0px;\r\n`\r\n\r\nconst getActiveIndex = (pathname: string): number => {\r\n  if (\r\n    pathname.includes('/pool') ||\r\n    pathname.includes('/create') ||\r\n    pathname.includes('/add') ||\r\n    pathname.includes('/remove') ||\r\n    pathname.includes('/find') ||\r\n    pathname.includes('/liquidity')\r\n  ) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nconst Nav: React.FC<Props> = ({ backTo }) => {\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n\r\n    <StyledNav>\r\n      <RowBetween>\r\n        <Flex alignItems=\"center\">\r\n          {backTo && (\r\n            <IconButton as={Link} to={backTo} scale=\"sm\">\r\n              <ArrowBackIcon width=\"20px\" />\r\n            </IconButton>\r\n          )}\r\n        </Flex>\r\n        <ButtonMenu activeIndex={getActiveIndex(location.pathname)} scale=\"sm\" variant=\"subtle\">\r\n          <ButtonMenuItem id=\"swap-nav-link\" to=\"/swap\" as={Link}>\r\n            {t('Swap')}\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem id=\"pool-nav-link\" to=\"/pool\" as={Link}>\r\n            {t('Liquidity')}\r\n          </ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </RowBetween>\r\n    </StyledNav>\r\n  )\r\n}\r\n\r\nconst Nav1 = () => {\r\n  const location = useLocation()\r\n  const { t } = useTranslation()\r\n  return (\r\n\r\n    <StyledNav>\r\n      <ButtonMenu activeIndex={getActiveIndex(location.pathname)} scale=\"sm\" variant=\"subtle\">\r\n        <ButtonMenuItem id=\"swap-nav-link\" to=\"/swap\" as={Link}>\r\n          {t('Swap')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem id=\"pool-nav-link\" to=\"/pool\" as={Link}>\r\n          {t('Liquidity')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </StyledNav>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { escapeRegExp } from '../../utils'\r\n\r\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\r\n  color: ${({ error, theme }) => (error ? theme.colors.failure : theme.colors.text)};\r\n  width: 0;\r\n  position: relative;\r\n  font-weight: 600;\r\n  outline: none;\r\n  border: none;\r\n  flex: 1 1 auto;\r\n  background-color: transparent;\r\n  font-size: 18px;\r\n  text-align: ${({ align }) => align && align};\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  padding: 0px;\r\n  -webkit-appearance: textfield;\r\n\r\n  ::-webkit-search-decoration {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  [type='number'] {\r\n    -moz-appearance: textfield;\r\n  }\r\n\r\n  ::-webkit-outer-spin-button,\r\n  ::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n  }\r\n\r\n  ::placeholder {\r\n    color: ${({ theme }) => theme.colors.text};\r\n  }\r\n`\r\n\r\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\r\n\r\nexport const Input = React.memo(function InnerInput({\r\n  value,\r\n  onUserInput,\r\n  placeholder,\r\n  ...rest\r\n}: {\r\n  value: string | number\r\n  onUserInput: (input: string) => void\r\n  error?: boolean\r\n  fontSize?: string\r\n  align?: 'right' | 'left'\r\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\r\n  const enforcer = (nextUserInput: string) => {\r\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\r\n      onUserInput(nextUserInput)\r\n    }\r\n  }\r\n\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <StyledInput\r\n      {...rest}\r\n      value={value}\r\n      onChange={(event) => {\r\n        // replace commas with periods, because we exclusively uses period as the decimal separator\r\n        enforcer(event.target.value.replace(/,/g, '.'))\r\n      }}\r\n      // universal input options\r\n      inputMode=\"decimal\"\r\n      title={t('Token Amount')}\r\n      autoComplete=\"off\"\r\n      autoCorrect=\"off\"\r\n      // text-specific options\r\n      type=\"text\"\r\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\r\n      placeholder={placeholder || '0.0'}\r\n      minLength={1}\r\n      maxLength={79}\r\n      spellCheck=\"false\"\r\n    />\r\n  )\r\n})\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport { Currency, Pair } from '@pancakeswap/sdk'\r\nimport { Button, ChevronDownIcon, Text, useModal, Flex } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { useCurrencyBalance } from '../../state/wallet/hooks'\r\nimport CurrencySearchModal from '../SearchModal/CurrencySearchModal'\r\nimport { CurrencyLogo, DoubleCurrencyLogo } from '../Logo'\r\n\r\nimport { RowBetween } from '../Layout/Row'\r\nimport { Input as NumericalInput } from './NumericalInput'\r\n\r\nconst InputRow = styled.div<{ selected: boolean }>`\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  align-items: center;\r\n  padding: ${({ selected }) => (selected ? '0.75rem 0.5rem 0.75rem 1rem' : '0.75rem 0.75rem 0.75rem 1rem')};\r\n`\r\nconst CurrencySelectButton = styled(Button).attrs({ variant: 'text', scale: 'sm' })`\r\n  padding: 0 0.5rem;\r\n`\r\nconst LabelRow = styled.div`\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  align-items: center;\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 0.75rem;\r\n  line-height: 1rem;\r\n  padding: 0.75rem 1rem 0 1rem;\r\n`\r\nconst InputPanel = styled.div<{ hideInput?: boolean }>`\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  position: relative;\r\n  border-radius: ${({ hideInput }) => (hideInput ? '8px' : '20px')};\r\n  background-color: ${({ theme }) => theme.colors.background};\r\n  z-index: 1;\r\n`\r\nconst Container = styled.div<{ hideInput: boolean }>`\r\n  border-radius: 24px;\r\n  padding-inline: 15px;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  box-shadow: ${({ theme }) => theme.shadows.inset};\r\n`\r\ninterface CurrencyInputPanelProps {\r\n  value: string\r\n  onUserInput: (value: string) => void\r\n  onMax?: () => void\r\n  showMaxButton: boolean\r\n  label?: string\r\n  onCurrencySelect: (currency: Currency) => void\r\n  currency?: Currency | null\r\n  disableCurrencySelect?: boolean\r\n  hideBalance?: boolean\r\n  pair?: Pair | null\r\n  hideInput?: boolean\r\n  otherCurrency?: Currency | null\r\n  id: string\r\n  showCommonBases?: boolean\r\n}\r\nexport default function CurrencyInputPanel({\r\n  value,\r\n  onUserInput,\r\n  onMax,\r\n  showMaxButton,\r\n  label,\r\n  onCurrencySelect,\r\n  currency,\r\n  disableCurrencySelect = false,\r\n  hideBalance = false,\r\n  pair = null, // used for double token logo\r\n  hideInput = false,\r\n  otherCurrency,\r\n  id,\r\n  showCommonBases,\r\n}: CurrencyInputPanelProps) {\r\n  const { account } = useActiveWeb3React()\r\n  const selectedCurrencyBalance = useCurrencyBalance(account ?? undefined, currency ?? undefined)\r\n  const { t } = useTranslation()\r\n  const translatedLabel = label || t('Input')\r\n\r\n  const [onPresentCurrencyModal] = useModal(\r\n    <CurrencySearchModal\r\n      onCurrencySelect={onCurrencySelect}\r\n      selectedCurrency={currency}\r\n      otherSelectedCurrency={otherCurrency}\r\n      showCommonBases={showCommonBases}\r\n    />,\r\n  )\r\n  return (\r\n    <InputPanel id={id}>\r\n      <Container hideInput={hideInput}>\r\n        {!hideInput && (\r\n          <LabelRow>\r\n            <RowBetween>\r\n              <Text fontSize=\"14px\" color=\"#718096\">{translatedLabel}</Text>\r\n              {account && (\r\n                !hideBalance && !!currency && selectedCurrencyBalance ? \r\n                  <Text fontSize=\"14px\" color=\"#718096\" style={{ display: 'inline' }}>\r\n                    {'Balance '} \r\n                      <span style={{ color: '#1ac486', fontSize: '16px', fontWeight: 600 }}>\r\n                        {t('%amount%', { amount: selectedCurrencyBalance?.toSignificant(6) ?? '' })}\r\n                      </span>\r\n                  </Text>\r\n                :\r\n                  <Text fontSize=\"16px\" style={{ display: 'inline', color: '#1ac486', fontWeight: 600 }}>\r\n                    {' -'}\r\n                  </Text>\r\n              )}\r\n            </RowBetween>\r\n          </LabelRow>\r\n        )}\r\n        <InputRow style={hideInput ? { padding: '0', borderRadius: '8px' } : {}} selected={disableCurrencySelect}>\r\n          {!hideInput && (\r\n            <>\r\n              <NumericalInput\r\n                className=\"token-amount-input\"\r\n                value={value}\r\n                onUserInput={(val) => {\r\n                  onUserInput(val)\r\n                }}\r\n              />\r\n              {account && currency && showMaxButton && label !== 'To' && (\r\n                <Button onClick={onMax} scale=\"sm\" variant=\"text\">\r\n                  MAX\r\n                </Button>\r\n              )}\r\n            </>\r\n          )}\r\n          <CurrencySelectButton\r\n            selected={!!currency}\r\n            className=\"open-currency-select-button\"\r\n            onClick={() => {\r\n              if (!disableCurrencySelect) {\r\n                onPresentCurrencyModal()\r\n              }\r\n            }}\r\n          >\r\n            <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n              {pair ? (\r\n                <DoubleCurrencyLogo currency0={pair.token0} currency1={pair.token1} size={16} margin />\r\n              ) : currency ? (\r\n                <CurrencyLogo currency={currency} size=\"24px\" style={{ marginRight: '8px' }} />\r\n              ) : null}\r\n              {pair ? (\r\n                <Text id=\"pair\">\r\n                  {pair?.token0.symbol}:{pair?.token1.symbol}\r\n                </Text>\r\n              ) : (\r\n                <Text id=\"pair\">\r\n                  {(currency && currency.symbol && currency.symbol.length > 20\r\n                    ? `${currency.symbol.slice(0, 4)}...${currency.symbol.slice(\r\n                        currency.symbol.length - 5,\r\n                        currency.symbol.length,\r\n                      )}`\r\n                    : currency?.symbol) || t('Select a currency')}\r\n                </Text>\r\n              )}\r\n              {!disableCurrencySelect && <ChevronDownIcon />}\r\n            </Flex>\r\n          </CurrencySelectButton>\r\n        </InputRow>\r\n      </Container>\r\n    </InputPanel>\r\n  )\r\n}\r\n","import { Token, TokenAmount } from '@pancakeswap/sdk'\r\nimport { useMemo } from 'react'\r\n\r\nimport { useTokenContract } from './useContract'\r\nimport { useSingleCallResult } from '../state/multicall/hooks'\r\n\r\nfunction useTokenAllowance(token?: Token, owner?: string, spender?: string): TokenAmount | undefined {\r\n  const contract = useTokenContract(token?.address, false)\r\n\r\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\r\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result\r\n\r\n  return useMemo(\r\n    () => (token && allowance ? new TokenAmount(token, allowance.toString()) : undefined),\r\n    [token, allowance],\r\n  )\r\n}\r\n\r\nexport default useTokenAllowance\r\n","import { MaxUint256 } from '@ethersproject/constants'\r\nimport { TransactionResponse } from '@ethersproject/providers'\r\nimport { Trade, TokenAmount, CurrencyAmount, ETHER } from '@pancakeswap/sdk'\r\nimport { useCallback, useMemo } from 'react'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { ROUTER_ADDRESS } from '../config/constants'\r\nimport useTokenAllowance from './useTokenAllowance'\r\nimport { Field } from '../state/swap/actions'\r\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks'\r\nimport { computeSlippageAdjustedAmounts } from '../utils/prices'\r\nimport { calculateGasMargin } from '../utils'\r\nimport { useTokenContract } from './useContract'\r\nimport { useCallWithGasPrice } from './useCallWithGasPrice'\r\n\r\nexport enum ApprovalState {\r\n  UNKNOWN,\r\n  NOT_APPROVED,\r\n  PENDING,\r\n  APPROVED,\r\n}\r\n\r\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\r\nexport function useApproveCallback(\r\n  amountToApprove?: CurrencyAmount,\r\n  spender?: string,\r\n): [ApprovalState, () => Promise<void>] {\r\n  const { account } = useActiveWeb3React()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined\r\n  const currentAllowance = useTokenAllowance(token, account ?? undefined, spender)\r\n  const pendingApproval = useHasPendingApproval(token?.address, spender)\r\n\r\n  // check the current approval status\r\n  const approvalState: ApprovalState = useMemo(() => {\r\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN\r\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED\r\n    // we might not have enough data to know whether or not we need to approve\r\n    if (!currentAllowance) return ApprovalState.UNKNOWN\r\n\r\n    // amountToApprove will be defined if currentAllowance is\r\n    return currentAllowance.lessThan(amountToApprove)\r\n      ? pendingApproval\r\n        ? ApprovalState.PENDING\r\n        : ApprovalState.NOT_APPROVED\r\n      : ApprovalState.APPROVED\r\n  }, [amountToApprove, currentAllowance, pendingApproval, spender])\r\n\r\n  const tokenContract = useTokenContract(token?.address)\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  const approve = useCallback(async (): Promise<void> => {\r\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\r\n      console.error('approve was called unnecessarily')\r\n      return\r\n    }\r\n    if (!token) {\r\n      console.error('no token')\r\n      return\r\n    }\r\n\r\n    if (!tokenContract) {\r\n      console.error('tokenContract is null')\r\n      return\r\n    }\r\n\r\n    if (!amountToApprove) {\r\n      console.error('missing amount to approve')\r\n      return\r\n    }\r\n\r\n    if (!spender) {\r\n      console.error('no spender')\r\n      return\r\n    }\r\n\r\n    let useExact = false\r\n\r\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\r\n      // general fallback for tokens who restrict approval amounts\r\n      useExact = true\r\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString())\r\n    })\r\n\r\n    // eslint-disable-next-line consistent-return\r\n    return callWithGasPrice(\r\n      tokenContract,\r\n      'approve',\r\n      [spender, useExact ? amountToApprove.raw.toString() : MaxUint256],\r\n      {\r\n        gasLimit: calculateGasMargin(estimatedGas),\r\n      },\r\n    )\r\n      .then((response: TransactionResponse) => {\r\n        addTransaction(response, {\r\n          summary: `Approve ${amountToApprove.currency.symbol}`,\r\n          approval: { tokenAddress: token.address, spender },\r\n        })\r\n      })\r\n      .catch((error: Error) => {\r\n        console.error('Failed to approve token', error)\r\n        throw error\r\n      })\r\n  }, [approvalState, token, tokenContract, amountToApprove, spender, addTransaction, callWithGasPrice])\r\n\r\n  return [approvalState, approve]\r\n}\r\n\r\n// wraps useApproveCallback in the context of a swap\r\nexport function useApproveCallbackFromTrade(trade?: Trade, allowedSlippage = 0) {\r\n  const amountToApprove = useMemo(\r\n    () => (trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined),\r\n    [trade, allowedSlippage],\r\n  )\r\n\r\n  return useApproveCallback(amountToApprove, ROUTER_ADDRESS)\r\n}\r\n","import { BigNumber } from 'ethers'\r\nimport { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { AppState } from '../state'\r\nimport useCurrentBlockTimestamp from './useCurrentBlockTimestamp'\r\n\r\n// combines the block timestamp with the user setting to give the deadline that should be used for any submitted transaction\r\nexport default function useTransactionDeadline(): BigNumber | undefined {\r\n  const ttl = useSelector<AppState, number>((state) => state.user.userDeadline)\r\n  const blockTimestamp = useCurrentBlockTimestamp()\r\n  return useMemo(() => {\r\n    if (blockTimestamp && ttl) return blockTimestamp.add(ttl)\r\n    return undefined\r\n  }, [blockTimestamp, ttl])\r\n}\r\n","import { BigNumber } from 'ethers'\r\nimport { useSingleCallResult } from '../state/multicall/hooks'\r\nimport { useMulticallContract } from './useContract'\r\n\r\n// gets the current timestamp from the blockchain\r\nexport default function useCurrentBlockTimestamp(): BigNumber | undefined {\r\n  const multicall = useMulticallContract()\r\n  return useSingleCallResult(multicall, 'getCurrentBlockTimestamp')?.result?.[0]\r\n}\r\n"],"sourceRoot":""}
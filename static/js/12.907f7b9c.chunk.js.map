{"version":3,"sources":["views/PoolFinder/index.tsx","components/PositionCard/index.tsx","components/Links/index.tsx"],"names":["Fields","StyledButton","styled","Button","theme","colors","input","text","PoolFinder","account","useActiveWeb3React","t","useTranslation","useState","TOKEN1","activeField","setActiveField","ETHER","currency0","setCurrency0","currency1","setCurrency1","usePair","undefined","pairState","pair","addPair","usePairAdder","useEffect","validPairNoLiquidity","PairState","NOT_EXISTS","Boolean","EXISTS","JSBI","equal","reserve0","raw","BigInt","reserve1","position","useTokenBalance","liquidityToken","hasPosition","greaterThan","handleCurrencySelect","useCallback","currency","TOKEN0","prerequisiteMessage","padding","textAlign","useModal","onCurrencySelect","showCommonBases","selectedCurrency","onPresentCurrencyModal","title","subtitle","backTo","style","gap","endIcon","onClick","ml","symbol","as","Row","justifyItems","backgroundColor","borderRadius","to","justify","currencyId","INVALID","fontWeight","LOADING","FixedHeightRow","RowBetween","MinimalPositionCard","showUnwrapped","token0","unwrappedToken","token1","showMore","setShowMore","userPoolBalance","totalPoolTokens","useTotalSupply","poolTokenPercentage","greaterThanOrEqual","Percent","getLiquidityValue","token0Deposited","token1Deposited","color","bold","margin","size","small","toSignificant","toFixed","asset","fontSize","role","FullPositionCard","props","justifyContent","p","flexDirection","alignItems","mb","BIG_INT_ZERO","Link","variant","width","startIcon","StyledInternalLink","primary"],"mappings":"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","file":"static/js/12.907f7b9c.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport { Currency, ETHER, JSBI, TokenAmount } from '@pancakeswap/sdk'\r\nimport { Button, ChevronDownIcon, Text, AddIcon, useModal } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { LightCard } from '../../components/Card'\r\nimport { AutoColumn, ColumnCenter } from '../../components/Layout/Column'\r\nimport { CurrencyLogo } from '../../components/Logo'\r\nimport { MinimalPositionCard } from '../../components/PositionCard'\r\nimport Row from '../../components/Layout/Row'\r\nimport CurrencySearchModal from '../../components/SearchModal/CurrencySearchModal'\r\nimport { PairState, usePair } from '../../hooks/usePairs'\r\nimport useActiveWeb3React from '../../hooks/useActiveWeb3React'\r\nimport { usePairAdder } from '../../state/user/hooks'\r\nimport { useTokenBalance } from '../../state/wallet/hooks'\r\nimport StyledInternalLink from '../../components/Links'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport Dots from '../../components/Loader/Dots'\r\nimport { AppHeader, AppBody } from '../../components/App'\r\nimport Page from '../Page'\r\n\r\nenum Fields {\r\n  TOKEN0 = 0,\r\n  TOKEN1 = 1,\r\n}\r\n\r\nconst StyledButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  box-shadow: none;\r\n  border-radius: 16px;\r\n`\r\n\r\nexport default function PoolFinder() {\r\n  const { account } = useActiveWeb3React()\r\n  const { t } = useTranslation()\r\n\r\n  const [activeField, setActiveField] = useState<number>(Fields.TOKEN1)\r\n  const [currency0, setCurrency0] = useState<Currency | null>(ETHER)\r\n  const [currency1, setCurrency1] = useState<Currency | null>(null)\r\n\r\n  const [pairState, pair] = usePair(currency0 ?? undefined, currency1 ?? undefined)\r\n  const addPair = usePairAdder()\r\n  useEffect(() => {\r\n    if (pair) {\r\n      addPair(pair)\r\n    }\r\n  }, [pair, addPair])\r\n\r\n  const validPairNoLiquidity: boolean =\r\n    pairState === PairState.NOT_EXISTS ||\r\n    Boolean(\r\n      pairState === PairState.EXISTS &&\r\n        pair &&\r\n        JSBI.equal(pair.reserve0.raw, JSBI.BigInt(0)) &&\r\n        JSBI.equal(pair.reserve1.raw, JSBI.BigInt(0)),\r\n    )\r\n\r\n  const position: TokenAmount | undefined = useTokenBalance(account ?? undefined, pair?.liquidityToken)\r\n  const hasPosition = Boolean(position && JSBI.greaterThan(position.raw, JSBI.BigInt(0)))\r\n\r\n  const handleCurrencySelect = useCallback(\r\n    (currency: Currency) => {\r\n      if (activeField === Fields.TOKEN0) {\r\n        setCurrency0(currency)\r\n      } else {\r\n        setCurrency1(currency)\r\n      }\r\n    },\r\n    [activeField],\r\n  )\r\n\r\n  const prerequisiteMessage = (\r\n    <LightCard padding=\"45px 10px\">\r\n      <Text textAlign=\"center\">\r\n        {!account ? t('Connect to a wallet to find pools') : t('Select a token to find your liquidity.')}\r\n      </Text>\r\n    </LightCard>\r\n  )\r\n\r\n  const [onPresentCurrencyModal] = useModal(\r\n    <CurrencySearchModal\r\n      onCurrencySelect={handleCurrencySelect}\r\n      showCommonBases\r\n      selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\r\n    />,\r\n    true,\r\n    true,\r\n    'selectCurrencyModal',\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <AppBody>\r\n        <AppHeader title={t('Import Pool')} subtitle={t('Import an existing pool')} backTo=\"/pool\" />\r\n        <AutoColumn style={{ padding: '1rem' }} gap=\"md\">\r\n          <StyledButton\r\n            endIcon={<ChevronDownIcon />}\r\n            onClick={() => {\r\n              onPresentCurrencyModal()\r\n              setActiveField(Fields.TOKEN0)\r\n            }}\r\n          >\r\n            {currency0 ? (\r\n              <Row>\r\n                <CurrencyLogo currency={currency0} />\r\n                <Text ml=\"8px\">{currency0.symbol}</Text>\r\n              </Row>\r\n            ) : (\r\n              <Text ml=\"8px\">{t('Select a Token')}</Text>\r\n            )}\r\n          </StyledButton>\r\n\r\n          <ColumnCenter>\r\n            <AddIcon />\r\n          </ColumnCenter>\r\n\r\n          <StyledButton\r\n            endIcon={<ChevronDownIcon />}\r\n            onClick={() => {\r\n              onPresentCurrencyModal()\r\n              setActiveField(Fields.TOKEN1)\r\n            }}\r\n          >\r\n            {currency1 ? (\r\n              <Row>\r\n                <CurrencyLogo currency={currency1} />\r\n                <Text ml=\"8px\">{currency1.symbol}</Text>\r\n              </Row>\r\n            ) : (\r\n              <Text as={Row}>{t('Select a Token')}</Text>\r\n            )}\r\n          </StyledButton>\r\n\r\n          {hasPosition && (\r\n            <ColumnCenter\r\n              style={{ justifyItems: 'center', backgroundColor: '', padding: '12px 0px', borderRadius: '12px' }}\r\n            >\r\n              <Text textAlign=\"center\">{t('Pool Found!')}</Text>\r\n              <StyledInternalLink to=\"/pool\">\r\n                <Text textAlign=\"center\">{t('Manage this pool.')}</Text>\r\n              </StyledInternalLink>\r\n            </ColumnCenter>\r\n          )}\r\n\r\n          {currency0 && currency1 ? (\r\n            pairState === PairState.EXISTS ? (\r\n              hasPosition && pair ? (\r\n                <MinimalPositionCard pair={pair} />\r\n              ) : (\r\n                <LightCard padding=\"45px 10px\">\r\n                  <AutoColumn gap=\"sm\" justify=\"center\">\r\n                    <Text textAlign=\"center\">{t('You don’t have liquidity in this pool yet.')}</Text>\r\n                    <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\r\n                      <Text textAlign=\"center\">{t('Add Liquidity')}</Text>\r\n                    </StyledInternalLink>\r\n                  </AutoColumn>\r\n                </LightCard>\r\n              )\r\n            ) : validPairNoLiquidity ? (\r\n              <LightCard padding=\"45px 10px\">\r\n                <AutoColumn gap=\"sm\" justify=\"center\">\r\n                  <Text textAlign=\"center\">{t('No pool found.')}</Text>\r\n                  <StyledInternalLink to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}>\r\n                    {t('Create pool.')}\r\n                  </StyledInternalLink>\r\n                </AutoColumn>\r\n              </LightCard>\r\n            ) : pairState === PairState.INVALID ? (\r\n              <LightCard padding=\"45px 10px\">\r\n                <AutoColumn gap=\"sm\" justify=\"center\">\r\n                  <Text textAlign=\"center\" fontWeight={500}>\r\n                    {t('Invalid pair.')}\r\n                  </Text>\r\n                </AutoColumn>\r\n              </LightCard>\r\n            ) : pairState === PairState.LOADING ? (\r\n              <LightCard padding=\"45px 10px\">\r\n                <AutoColumn gap=\"sm\" justify=\"center\">\r\n                  <Text textAlign=\"center\">\r\n                    {t('Loading')}\r\n                    <Dots />\r\n                  </Text>\r\n                </AutoColumn>\r\n              </LightCard>\r\n            ) : null\r\n          ) : (\r\n            prerequisiteMessage\r\n          )}\r\n        </AutoColumn>\r\n\r\n        {/* <CurrencySearchModal\r\n          isOpen={showSearch}\r\n          onCurrencySelect={handleCurrencySelect}\r\n          onDismiss={handleSearchDismiss}\r\n          showCommonBases\r\n          selectedCurrency={(activeField === Fields.TOKEN0 ? currency1 : currency0) ?? undefined}\r\n        /> */}\r\n      </AppBody>\r\n    </Page>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { JSBI, Pair, Percent } from '@pancakeswap/sdk'\r\nimport {\r\n  Button,\r\n  Text,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Card,\r\n  CardBody,\r\n  Flex,\r\n  CardProps,\r\n  AddIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport useTotalSupply from '../../hooks/useTotalSupply'\r\n\r\nimport { useTokenBalance } from '../../state/wallet/hooks'\r\nimport { currencyId } from '../../utils/currencyId'\r\nimport { unwrappedToken } from '../../utils/wrappedCurrency'\r\n\r\nimport { LightCard } from '../Card'\r\nimport { AutoColumn } from '../Layout/Column'\r\nimport CurrencyLogo from '../Logo/CurrencyLogo'\r\nimport { DoubleCurrencyLogo } from '../Logo'\r\nimport { RowBetween, RowFixed } from '../Layout/Row'\r\nimport { BIG_INT_ZERO } from '../../config/constants'\r\nimport Dots from '../Loader/Dots'\r\n\r\nconst FixedHeightRow = styled(RowBetween)`\r\n  height: 24px;\r\n`\r\n\r\ninterface PositionCardProps extends CardProps {\r\n  pair: Pair\r\n  showUnwrapped?: boolean\r\n}\r\n\r\nexport function MinimalPositionCard({ pair, showUnwrapped = false }: PositionCardProps) {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const currency0 = showUnwrapped ? pair.token0 : unwrappedToken(pair.token0)\r\n  const currency1 = showUnwrapped ? pair.token1 : unwrappedToken(pair.token1)\r\n\r\n  const [showMore, setShowMore] = useState(false)\r\n\r\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\r\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\r\n\r\n  const poolTokenPercentage =\r\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\r\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\r\n      : undefined\r\n\r\n  const [token0Deposited, token1Deposited] =\r\n    !!pair &&\r\n    !!totalPoolTokens &&\r\n    !!userPoolBalance &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\r\n      ? [\r\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\r\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\r\n        ]\r\n      : [undefined, undefined]\r\n\r\n  return (\r\n    <>\r\n      {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, JSBI.BigInt(0)) ? (\r\n        <Card>\r\n          <CardBody>\r\n            <AutoColumn gap=\"16px\">\r\n              <FixedHeightRow>\r\n                <RowFixed>\r\n                  <Text color=\"secondary\" bold>\r\n                    {t('LP tokens in your wallet')}\r\n                  </Text>\r\n                </RowFixed>\r\n              </FixedHeightRow>\r\n              <FixedHeightRow onClick={() => setShowMore(!showMore)}>\r\n                <RowFixed>\r\n                  <DoubleCurrencyLogo currency0={currency0} currency1={currency1} margin size={20} />\r\n                  <Text small color=\"textSubtle\">\r\n                    {currency0.symbol}-{currency1.symbol} LP\r\n                  </Text>\r\n                </RowFixed>\r\n                <RowFixed>\r\n                  <Text>{userPoolBalance ? userPoolBalance.toSignificant(4) : '-'}</Text>\r\n                </RowFixed>\r\n              </FixedHeightRow>\r\n              <AutoColumn gap=\"4px\">\r\n                <FixedHeightRow>\r\n                  <Text color=\"textSubtle\" small>\r\n                    {t('Share of Pool')}:\r\n                  </Text>\r\n                  <Text>{poolTokenPercentage ? `${poolTokenPercentage.toFixed(6)}%` : '-'}</Text>\r\n                </FixedHeightRow>\r\n                <FixedHeightRow>\r\n                  <Text color=\"textSubtle\" small>\r\n                    {t('Pooled %asset%', { asset: currency0.symbol })}:\r\n                  </Text>\r\n                  {token0Deposited ? (\r\n                    <RowFixed>\r\n                      <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\r\n                    </RowFixed>\r\n                  ) : (\r\n                    '-'\r\n                  )}\r\n                </FixedHeightRow>\r\n                <FixedHeightRow>\r\n                  <Text color=\"textSubtle\" small>\r\n                    {t('Pooled %asset%', { asset: currency1.symbol })}:\r\n                  </Text>\r\n                  {token1Deposited ? (\r\n                    <RowFixed>\r\n                      <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\r\n                    </RowFixed>\r\n                  ) : (\r\n                    '-'\r\n                  )}\r\n                </FixedHeightRow>\r\n              </AutoColumn>\r\n            </AutoColumn>\r\n          </CardBody>\r\n        </Card>\r\n      ) : (\r\n        <LightCard>\r\n          <Text fontSize=\"14px\" style={{ textAlign: 'center' }}>\r\n            <span role=\"img\" aria-label=\"pancake-icon\">\r\n              🥞\r\n            </span>{' '}\r\n            {t(\r\n              \"By adding liquidity you'll earn 0.17% of all trades on this pair proportional to your share of the pool. Fees are added to the pool, accrue in real time and can be claimed by withdrawing your liquidity.\",\r\n            )}\r\n          </Text>\r\n        </LightCard>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default function FullPositionCard({ pair, ...props }: PositionCardProps) {\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const currency0 = unwrappedToken(pair.token0)\r\n  const currency1 = unwrappedToken(pair.token1)\r\n\r\n  const [showMore, setShowMore] = useState(false)\r\n\r\n  const userPoolBalance = useTokenBalance(account ?? undefined, pair.liquidityToken)\r\n  const totalPoolTokens = useTotalSupply(pair.liquidityToken)\r\n\r\n  const poolTokenPercentage =\r\n    !!userPoolBalance && !!totalPoolTokens && JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\r\n      ? new Percent(userPoolBalance.raw, totalPoolTokens.raw)\r\n      : undefined\r\n\r\n  const [token0Deposited, token1Deposited] =\r\n    !!pair &&\r\n    !!totalPoolTokens &&\r\n    !!userPoolBalance &&\r\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\r\n    JSBI.greaterThanOrEqual(totalPoolTokens.raw, userPoolBalance.raw)\r\n      ? [\r\n          pair.getLiquidityValue(pair.token0, totalPoolTokens, userPoolBalance, false),\r\n          pair.getLiquidityValue(pair.token1, totalPoolTokens, userPoolBalance, false),\r\n        ]\r\n      : [undefined, undefined]\r\n\r\n  return (\r\n    <Card style={{ borderRadius: '12px' }} {...props}>\r\n      <Flex justifyContent=\"space-between\" role=\"button\" onClick={() => setShowMore(!showMore)} p=\"16px\">\r\n        <Flex flexDirection=\"column\">\r\n          <Flex alignItems=\"center\" mb=\"4px\">\r\n            <DoubleCurrencyLogo currency0={currency0} currency1={currency1} size={20} />\r\n            <Text bold ml=\"8px\">\r\n              {!currency0 || !currency1 ? <Dots>Loading</Dots> : `${currency0.symbol}/${currency1.symbol}`}\r\n            </Text>\r\n          </Flex>\r\n          <Text fontSize=\"14px\" color=\"textSubtle\">\r\n            {userPoolBalance?.toSignificant(4)}\r\n          </Text>\r\n        </Flex>\r\n        {showMore ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n      </Flex>\r\n\r\n      {showMore && (\r\n        <AutoColumn gap=\"8px\" style={{ padding: '16px' }}>\r\n          <FixedHeightRow>\r\n            <RowFixed>\r\n              <CurrencyLogo size=\"20px\" currency={currency0} />\r\n              <Text color=\"textSubtle\" ml=\"4px\">\r\n                Pooled {currency0.symbol}\r\n              </Text>\r\n            </RowFixed>\r\n            {token0Deposited ? (\r\n              <RowFixed>\r\n                <Text ml=\"6px\">{token0Deposited?.toSignificant(6)}</Text>\r\n              </RowFixed>\r\n            ) : (\r\n              '-'\r\n            )}\r\n          </FixedHeightRow>\r\n\r\n          <FixedHeightRow>\r\n            <RowFixed>\r\n              <CurrencyLogo size=\"20px\" currency={currency1} />\r\n              <Text color=\"textSubtle\" ml=\"4px\">\r\n                Pooled {currency1.symbol}\r\n              </Text>\r\n            </RowFixed>\r\n            {token1Deposited ? (\r\n              <RowFixed>\r\n                <Text ml=\"6px\">{token1Deposited?.toSignificant(6)}</Text>\r\n              </RowFixed>\r\n            ) : (\r\n              '-'\r\n            )}\r\n          </FixedHeightRow>\r\n\r\n          <FixedHeightRow>\r\n            <Text color=\"textSubtle\">Share of pool</Text>\r\n            <Text>\r\n              {poolTokenPercentage\r\n                ? `${poolTokenPercentage.toFixed(2) === '0.00' ? '<0.01' : poolTokenPercentage.toFixed(2)}%`\r\n                : '-'}\r\n            </Text>\r\n          </FixedHeightRow>\r\n\r\n          {userPoolBalance && JSBI.greaterThan(userPoolBalance.raw, BIG_INT_ZERO) && (\r\n            <Flex flexDirection=\"column\">\r\n              <Button\r\n                as={Link}\r\n                to={`/remove/${currencyId(currency0)}/${currencyId(currency1)}`}\r\n                variant=\"primary\"\r\n                width=\"100%\"\r\n                mb=\"8px\"\r\n              >\r\n                Remove\r\n              </Button>\r\n              <Button\r\n                as={Link}\r\n                to={`/add/${currencyId(currency0)}/${currencyId(currency1)}`}\r\n                variant=\"text\"\r\n                startIcon={<AddIcon color=\"primary\" />}\r\n                width=\"100%\"\r\n              >\r\n                Add liquidity instead\r\n              </Button>\r\n            </Flex>\r\n          )}\r\n        </AutoColumn>\r\n      )}\r\n    </Card>\r\n  )\r\n}\r\n","import { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\n\r\n// An internal link from the react-router-dom library that is correctly styled\r\nconst StyledInternalLink = styled(Link)`\r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n  font-weight: 500;\r\n\r\n  :hover {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  :focus {\r\n    outline: none;\r\n    text-decoration: underline;\r\n  }\r\n\r\n  :active {\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nexport default StyledInternalLink\r\n"],"sourceRoot":""}